<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: a9edd62d087ab1eb6292c795b7256e14ff9f1234 Maintainer: cmb Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 1.0 Reviewer: samesch -->
<sect1 xml:id="language.oop5.anonymous" xmlns="http://docbook.org/ns/docbook">
 <title>Anonyme Klassen</title>

 <para>
  Anonyme Klassen sind nützlich, wenn einfache Objekte zum einmaligen Gebrauch
  erzeugt werden müssen.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

// Verwendung einer expliziten Klasse
class Logger
{
    public function log($msg)
    {
        echo $msg;
    }
}

$util->setLogger(new Logger());

// Verwendung einer anonymen Klasse
$util->setLogger(new class {
    public function log($msg)
    {
        echo $msg;
    }
});
]]>
  </programlisting>
 </informalexample>

 <para>
  Anonyme Klassen können Argumente über ihren Konstruktor empfangen, andere
  Klassen erweitern, Interfaces implementieren und Traits genau wie eine
  normale Klasse verwenden:
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

class SomeClass {}
interface SomeInterface {}
trait SomeTrait {}

var_dump(new class(10) extends SomeClass implements SomeInterface {
    private $num;

    public function __construct($num)
    {
        $this->num = $num;
    }

    use SomeTrait;
});
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
object(class@anonymous)#1 (1) {
  ["Command line code0x104c5b612":"class@anonymous":private]=>
  int(10)
}
]]>
  </screen>
 </informalexample>

 <para>
  Das Verschachteln einer anonymen Klasse innerhalb einer anderen Klasse gibt
  ihr keinen Zugriff auf private oder geschützte Methoden oder Eigenschaften
  der äußeren Klasse. Um die geschützten Methoden oder Eigenschaften der
  äußeren Klasse zu verwenden, kann die anonyme Klasse die äußere Klasse
  erweitern. Um private Eigenschaften der äußeren Klasse in der anonymen
  Klasse zu verwenden, müssen sie dem Konstruktor übergeben werden:
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

class Outer
{
    private $prop = 1;
    protected $prop2 = 2;

    protected function func1()
    {
        return 3;
    }

    public function func2()
    {
        return new class($this->prop) extends Outer {
            private $prop3;

            public function __construct($prop)
            {
                $this->prop3 = $prop;
            }

            public function func3()
            {
                return $this->prop2 + $this->prop3 + $this->func1();
            }
        };
    }
}

echo (new Outer)->func2()->func3();
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
6
]]>
  </screen>
 </informalexample>

 <para>
  Alle Objekte, die durch dieselbe anonyme Klassendeklaration erzeugt werden,
  sind Instanzen von genau dieser Klasse.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
function anonymous_class()
{
    return new class {};
}

if (get_class(anonymous_class()) === get_class(anonymous_class())) {
    echo 'dieselbe Klasse';
} else {
    echo 'eine andere Klasse';
}]]>
 </programlisting>
 &example.outputs;
 <screen>
<![CDATA[
dieselbe Klasse
]]>
  </screen>
 </informalexample>

 <note>
  <para>
   Es ist zu beachten, dass anonymen Klassen von der Engine ein Name
   zugewiesen wird, wie im folgenden Beispiel gezeigt. Dieser Name muss als
   Implementierungsdetail eingestuft werden, auf dass sich nicht verlassen
   werden sollte.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo get_class(new class {});
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
class@anonymous/in/oNi1A0x7f8636ad2021
]]>
   </screen>
  </informalexample>
 </note>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
