<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9ee9eccf455188ab6eb352194eb6f9eb99e15606 Maintainer: simp Status: ready -->
 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>Eigenschaften</title>

  <para>
   Variablen in einer Klasse werden <emphasis>Eigenschaften</emphasis> genannt.
   Andere Begriffe wie <emphasis>Felder</emphasis> werden ebenfalls verwendet,
   um sich auf dasselbe Konzept zu beziehen, aber innerhalb dieser Referenz
   wird der Begriff <emphasis>Eigenschaften</emphasis> verwendet. Diese werden
   definiert, indem man eines der Schlüsselwörter <literal>public</literal>,
   <literal>protected</literal> oder <literal>private</literal>, seit PHP 7.4
   optional gefolgt von einer Typdeklaration, gefolgt von einer regulären
   Variablendeklaration verwendet. Die Deklaration darf eine Initialisierung
   des Variablenwertes beinhalten, der zu setzende Wert muss dabei allerdings
   ein <link linkend="language.constants">konstanter</link> Wert sein.
  </para>
  <para>
   Siehe <xref linkend="language.oop5.visibility" /> für mehr
   Informationen zur Bedeutung von <literal>public</literal>,
   <literal>protected</literal> und <literal>private</literal>.
  </para>
  <note>
   <para>
    Eine alternative, aber nicht empfohlene Möglichkeit, Klasseneigenschaften
    zu deklarieren, um die Abwärtskompatibilität mit Kompatibilität mit PHP 4
    zu wahren, ist die Verwendung des Schlüsselworts <literal>var</literal>.
    Damit wird die Eigenschaft genauso behandelt, wie wenn sie als
    <literal>public</literal> deklariert worden wäre.
   </para>
  </note>
  <para>
   Innerhalb der Methoden einer Klasse kann auf nicht-statische
   Eigenschaften zugegriffen werden, indem man (den Objektoperator)
   <literal>-&gt;</literal> verwendet:
   <varname>$this-&gt;Eigenschaft</varname>(wobei
   <literal>Eigenschaft</literal> der Name der Eigenschaft ist).
   Zugriff auf statische Eigenschaften erhält man, indem man (den
   Doppel-Doppelpunkt) <literal>::</literal> verwendet:
   <varname>self::$Eigenschaft</varname>. Siehe auch
   <link linkend="language.oop5.static">Static-Schlüsselwort</link>
   für mehr Informationen zu diesem Thema.
  </para>
  <para>
   Die Pseudo-Variable <varname>$this</varname> ist innerhalb jeder
   Klassenmethode verfügbar, wenn diese Methode im Kontext eines Objektes
   aufgerufen wird. <varname>$this</varname> ist der Wert des aufrufenden
   Objekts.
  </para>

  <para>
   <example>
    <title>Deklaration von Eigenschaften</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   public $var1 = 'Hallo ' . 'Welt';
   public $var2 = <<<EOD
Hallo Welt
EOD;
   public $var3 = 1+2;
   // Ungültige Deklarationen von Eigenschaften:
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // Gültige Deklarationen von Eigenschaften:
   public $var6 = myConstant;
   public $var7 = [true, false];

   public $var8 = <<<'EOD'
Hallo Welt
EOD;
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <note>
   <para>
    Es gibt verschiedene Funktionen für den Umgang mit Klassen und Objekten.
    Siehe hierzu
    <link linkend="ref.classobj">Klassen- und Objekt-Funktionen</link>.
   </para>
  </note>

  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Type declarations</title>
   <para>
    Von PHP 7.4.0 an können Eigenschaftsdefinitionen
    <xref linkend="language.types.declarations" /> enthalten, mit Ausnahme des
    Typs <type>callable</type>.
    <example>
     <title>Beispiel von typisierten Eigenschaften</title>
     <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
int(1234)
NULL
]]>
     </screen>
    </example>
   </para>

   <para>
    Typisierte Eigenschaften müssen vor dem Zugriff initialisiert werden,
    sonst wird ein <classname>Error</classname> ausgelöst.
    <example>
     <title>Auf Eigenschaften zugreifen</title>
     <programlisting role="php">
<![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>
  </sect2>

 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
