<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 52407313885d27a4e891e08dd2e2481bcc39e244 Maintainer: nobody Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: e4b889a3e8b9d87ab605aac9bbe85d2c16c69a1b Reviewer: samesch -->
<!-- CREDITS: tzwenny, betz -->
<sect1 xml:id="language.operators.increment">
 <title>Inkrement- bzw. Dekrementoperatoren</title>
 <para>
  PHP unterstützt Prä- und Post-Inkrement- und Dekrementoperatoren im Stil der
  Programmiersprache C.
 </para>
 <note>
  <simpara>
   Die Inkrement-/Dekrement-Operatoren wirken nur auf Zahlen und
   Zeichenketten. Bei Arrays, Objekten, Booleans und Ressourcen wirken sie
   nicht. Das Dekrementieren von &null; Werten hat ebenfalls keine Wirkung,
   aber sie zu Inkrementieren ergibt <literal>1</literal>.
  </simpara>
 </note>
 <table>
  <title>Inkrement- und Dekrementoperatoren</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Beispiel</entry>
     <entry>Name</entry>
     <entry>Auswirkung</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>++$a</entry>
     <entry>Prä-Inkrement</entry>
     <entry>
      Erhöht <varname>$a</varname> um eins und gibt dann
      <varname>$a</varname> zurück.
     </entry>
    </row>
    <row>
     <entry>$a++</entry>
     <entry>Post-Inkrement</entry>
     <entry>
      Gibt <varname>$a</varname> zurück und erhöht <varname>$a</varname>
      dann um eins.
     </entry>
    </row>
    <row>
     <entry>--$a</entry>
     <entry>Prä-Dekrement</entry>
     <entry>
      Vermindert <varname>$a</varname> um eins, und gibt dann
      <varname>$a</varname> zurück.
     </entry>
    </row>
    <row>
     <entry>$a--</entry>
     <entry>Post-Dekrement</entry>
     <entry>
      Gibt <varname>$a</varname> zurück, und vermindert
      <varname>$a</varname> dann um eins.
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  Ein einfaches Beispiel-Skript:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo "<h3>Post-Inkrement</h3>";
$a = 5;
echo "Sollte 5 sein: " . $a++ . "<br />\n";
echo "Sollte 6 sein: " . $a . "<br />\n";

echo "<h3>Pre-Inkrement</h3>";
$a = 5;
echo "Sollte 6 sein: " . ++$a . "<br />\n";
echo "Sollte 6 sein: " . $a . "<br />\n";

echo "<h3>Post-Dekrement</h3>";
$a = 5;
echo "Sollte 5 sein: " . $a-- . "<br />\n";
echo "Sollte 4 sein: " . $a . "<br />\n";

echo "<h3>Pre-Dekrement</h3>";
$a = 5;
echo "Sollte 4 sein: " . --$a . "<br />\n";
echo "Sollte 4 sein: " . $a . "<br />\n";
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  PHP folgt bei der Behandlung arithmetischer Operationen auf Zeichenvariablen
  der Perl-Konvention und nicht der von C. Zum Beispiel ändert in PHP und Perl
  <literal>$a = 'Z'; $a++;</literal> <literal>$a</literal> zu
  <literal>'AA'</literal>, während <literal>a = 'Z'; a++;</literal> in C
  <literal>a</literal> zu <literal>'['</literal> ändert. (Der ASCII-Wert von
  <literal>'Z'</literal> ist 90, der ASCII-Wert von <literal>'['</literal> ist
  91). Es ist zu beachten, dass Zeichenvariablen inkrementiert, aber nicht
  dekrementiert werden können, und dass nur einfache ASCII-Buchstaben und
  Ziffern (a-z, A-Z, 0-9) unterstützt werden. Das Inkrementieren oder
  Dekrementieren anderer Zeichenvariablen hat keine Auswirkung; die
  ursprüngliche Zeichenkette wird nicht verändert.
  <example>
   <title>Arithmetrische Operationen an Zeichenvariablen</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '== Zeichenketten aus Buchstaben ==' . PHP_EOL;
$s = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$s . PHP_EOL;
}
// Alphanumerische Zeichenketten verhalten sich anders
echo '== Alphanumerische Zeichenketten ==' . PHP_EOL;
$d = 'A8';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
$d = 'A08';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
== Zeichenketten aus Buchstaben ==
X
Y
Z
AA
AB
AC
== Alphanumerische Zeichenketten ==
A9
B0
B1
B2
B3
B4
A09
A10
A11
A12
A13
A14
]]>
   </screen>
  </example>
 </para>
 <para>
  Das Inkrementieren oder Dekrementieren Boolescher Variablen hat keine
  Auswirkung.
 </para>
</sect1>
