<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 02302a754aa0b2ea9a783f792e2c2c6c54230829 Maintainer: nobody Status: wip -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: e4b889a3e8b9d87ab605aac9bbe85d2c16c69a1b Reviewer: samesch -->
<!-- CREDITS: tzwenny, betz -->
<sect1 xml:id="language.operators.increment">
 <title>Inkrement- bzw. Dekrementoperatoren</title>
 <para>
  PHP unterstützt Prä- und Post-Inkrement- und Dekrementoperatoren.
  Diese unären (einstelligen) Operatoren ermöglichen es, einen Wert um eins zu
  erhöhen oder zu verringern.
 </para>
 <table>
  <title>Inkrement- und Dekrementoperatoren</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Beispiel</entry>
     <entry>Name</entry>
     <entry>Auswirkung</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>++$a</entry>
     <entry>Prä-Inkrement</entry>
     <entry>
      Erhöht <varname>$a</varname> um eins und gibt dann
      <varname>$a</varname> zurück.
     </entry>
    </row>
    <row>
     <entry>$a++</entry>
     <entry>Post-Inkrement</entry>
     <entry>
      Gibt <varname>$a</varname> zurück und erhöht <varname>$a</varname>
      dann um eins.
     </entry>
    </row>
    <row>
     <entry>--$a</entry>
     <entry>Prä-Dekrement</entry>
     <entry>
      Vermindert <varname>$a</varname> um eins, und gibt dann
      <varname>$a</varname> zurück.
     </entry>
    </row>
    <row>
     <entry>$a--</entry>
     <entry>Post-Dekrement</entry>
     <entry>
      Gibt <varname>$a</varname> zurück, und vermindert
      <varname>$a</varname> dann um eins.
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  Ein einfaches Beispiel-Skript:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo "Post-Inkrement", PHP_EOL;
$a = 5;
var_dump($a++);
var_dump($a);

echo "Prä-Inkrement", PHP_EOL;
$a = 5;
var_dump(++$a);
var_dump($a);

echo "Post-Dekrement", PHP_EOL;
$a = 5;
var_dump($a--);
var_dump($a);

echo "Prä-Dekrement", PHP_EOL;
$a = 5;
var_dump(--$a);
var_dump($a);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Post-Inkrement:
int(5)
int(6)
Prä-Inkrement:
int(6)
int(6)
Post-Dekrement:
int(5)
int(4)
Prä-Dekrement:
int(4)
int(4)
]]>
   </screen>
  </informalexample>

  <warning>
   <para>
    The increment and decrement operators have no effect on values
    of type <type>bool</type>.
    A <constant>E_WARNING</constant> is emitted as of PHP 8.3.0,
    because this will implicitly cast the value to <type>int</type> in the future.
   </para>
   <para>
    The decrement operator has no effect on values
    of type <type>null</type>.
    A <constant>E_WARNING</constant> is emitted as of PHP 8.3.0,
    because this will implicitly cast the value to <type>int</type> in the future.
   </para>
   <para>
    The decrement operator has no effect on non-
    <link linkend="language.types.numeric-strings">numeric string</link>.
    A <constant>E_WARNING</constant> is emitted as of PHP 8.3.0,
    because a <classname>TypeError</classname> will be thrown in the future.
   </para>
  </warning>
  <note>
   <para>
    Internal objects that support overloading addition and/or subtraction
    can also be incremented and/or decremented.
    One such internal object is <classname>GMP</classname>.
   </para>
  </note>
 </para>

 <sect2 xml:id="language.operators.increment.string">
  <title>PERL string increment feature</title>
  <warning>
   <simpara>
    This feature is soft-deprecated as of PHP 8.3.0.
    The <function>str_increment</function> function should be used instead.
   </simpara>
  </warning>
  <para>
   It is possible to increment a non-
   <link linkend="language.types.numeric-strings">numeric string</link>
   in PHP. The string must be an alphanumerical ASCII string.
   Which increments letters up to the next letter, when reaching the letter
   <literal>Z</literal> the increment is carried to the value on the left.
   For example, <code>$a = 'Z'; $a++;</code> turns <varname>$a</varname>
   into <literal>'AA'</literal>.
  </para>
  <example>
   <title>PERL string increment example</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '== Zeichenketten aus Buchstaben ==' . PHP_EOL;
$s = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$s . PHP_EOL;
}
// Alphanumerische Zeichenketten verhalten sich anders
echo '== Alphanumerische Zeichenketten ==' . PHP_EOL;
$d = 'A8';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
$d = 'A08';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
== Zeichenketten aus Buchstaben ==
X
Y
Z
AA
AB
AC
== Alphanumerische Zeichenketten ==
A9
B0
B1
B2
B3
B4
A09
A10
A11
A12
A13
A14
]]>
   </screen>
  </example>
  <warning>
   <para>
    If the alphanumerical string can be interpreted as a
    <link linkend="language.types.numeric-strings">numeric string</link>
    it will be cast to an <type>int</type> or <type>float</type>.
    This is particularly an issue with strings that look like a floating point
    numbers written in exponential notation.
    The <function>str_increment</function> function does not suffer from
    these implicit type cast.
   </para>
   <example>
    <title>Alphanumerical string converted to float</title>
    <programlisting role="php">
<![CDATA[
<?php
$s = "5d9";
var_dump(++$s);
var_dump(++$s);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "5e0"
float(6)
]]>
    </screen>
    <para>
     This is because the value <literal>"5e0"</literal> is interpreted
     as a <type>float</type> and cast to the value <literal>5.0</literal>
     before being incremented.
    </para>
   </example>
  </warning>
 </sect2>
</sect1>
