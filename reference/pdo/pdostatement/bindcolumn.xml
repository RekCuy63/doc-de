<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 082ddc19f53e6e254010de1a1fbbe485ff744ec1 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.bindcolumn" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::bindColumn</refname>
  <refpurpose>Bindet eine Spalte an eine PHP-Variable</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>bool</type><methodname>PDOStatement::bindColumn</methodname>
   <methodparam><type class="union"><type>string</type><type>int</type></type><parameter>column</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer>PDO::PARAM_STR</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>maxLength</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>driverOptions</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>

  <para>
   <methodname>PDOStatement::bindColumn</methodname> bindet die angegebene
   Variable an die angegebene Spalte der Ergebnismenge einer Abfrage. Jedes
   Mal, wenn <methodname>PDOStatement::fetch</methodname> oder
   <methodname>PDOStatement::fetchAll</methodname> aufgerufen wird, werden
   alle an Spalten gebundenen Variablen aktualisiert.
  </para>
  <note>
   <para>
    Da Informationen über die Spalten für PDO erst verfügbar sind, nachdem die
    Anweisung ausgeführt wurde, sollte diese Funktion in portablen Anwendungen
    <emphasis>nach</emphasis> <methodname>PDOStatement::execute</methodname>
    aufgerufen werden.
   </para>
   <para>
    Um jedoch bei Verwendung des <emphasis>PgSQL-Treibers</emphasis> eine
    Spalte vom Typ LOB mit einem Stream verknüpfen zu können, muss diese
    Methode <emphasis>vor</emphasis>
    <methodname>PDOStatement::execute</methodname> aufgerufen werden, weil die
    Anwendung das OID-Objekt ansonsten als Integer erhält.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>column</parameter></term>
     <listitem>
      <para>
       Die Spaltennummer (beginnend mit 1) oder der Spaltenname in der
       Ergebnismenge. Wird der Spaltenname verwendet, ist zu beachten, dass
       der Name mit der vom Treiber zurückgegebenen Groß-/Kleinschreibung der
       Spalte übereinstimmen muss.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Der Name der PHP-Variable, an die die Spalte gebunden werden soll.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       Der Datentyp des Parameters, angegeben durch eine der
       <link linkend="pdo.constants"><literal>PDO::PARAM_*</literal>-Konstanten</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>maxLength</parameter></term>
     <listitem>
      <para>
       Ein Hinweis, um Speicherplatz vorab zuzuweisen.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>driverOptions</parameter></term>
     <listitem>
      <para>
       Optionale Parameter für den Treiber.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Binden der Ergebnismenge an PHP-Variablen</title>
    <para>
     Die Spalten einer Ergebnismenge an PHP-Variablen zu binden, ist eine
     effektive Methode, um die in jeder Zeile enthaltenen Daten sofort für
     eine Anwendung verfügbar zu machen. Im folgenden Beispiel wird gezeigt,
     wie Spalten mittels PDO mit einer ganzen Reihe von Optionen und
     sinnvollen Voreinstellungen gebunden und abgerufen werden können.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare('SELECT name, colour, calories FROM fruit');
$stmt->execute();

/* Binden anhand der Spaltennummer */
$stmt->bindColumn(1, $name);
$stmt->bindColumn(2, $colour);

/* Binden anhand des Spaltennamens */
$stmt->bindColumn('calories', $cals);

while ($stmt->fetch(PDO::FETCH_BOUND)) {
    print $name . "\t" . $colour . "\t" . $cals . "\n";
}
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
apple   red     150
banana  yellow  175
kiwi    green   75
orange  orange  150
mango   red     200
strawberry      red     25
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDOStatement::execute</methodname></member>
    <member><methodname>PDOStatement::fetch</methodname></member>
    <member><methodname>PDOStatement::fetchAll</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
