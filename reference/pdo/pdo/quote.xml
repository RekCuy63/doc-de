<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 661e6858acade9f5a08fc8f9c07b605f42f4a700 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdo.quote" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::quote</refname>
  <refpurpose>
   Setzt eine Zeichenkette für die Verwendung in einer Abfrage in Anführungszeichen
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDO">
   <modifier>public</modifier> <type class="union"><type>string</type><type>false</type></type><methodname>PDO::quote</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer>PDO::PARAM_STR</initializer></methodparam>
  </methodsynopsis>
  <para>
   <methodname>PDO::quote</methodname> schließt die angegebene Zeichenkette
   (falls erforderlich) in Anführungszeichen ein und maskiert Sonderzeichen
   innerhalb der Zeichenkette, wobei ein für den zugrundeliegenden Treiber
   geeigneter Stil der Anführungszeichen verwendet wird.
  </para>
  <para>
   Wenn SQL-Anweisungen mit dieser Funktion erstellt werden, wird
   <emphasis>dringend</emphasis> empfohlen,
   <methodname>PDO::prepare</methodname> zu verwenden, um SQL-Anweisungen mit
   gebundenen Parametern vorzubereiten, anstatt
   <methodname>PDO::quote</methodname> zu verwenden, um Benutzereingaben in
   eine SQL-Anweisung einzufügen. Vorbereitete Anweisungen mit gebundenen
   Parametern sind nicht nur portabler, bequemer und immun gegen
   SQL-Injections, sondern lassen sich oft auch viel schneller ausführen als
   interpolierte Abfragen, da sowohl der Server als auch der Client die
   Abfragen in einer bereits kompilierten Form zwischenspeichern können.
  </para>
  <para>
   Diese Methode ist nicht bei allen PDO-Treibern implementiert (insbesondere
   nicht bei PDO_ODBC). In diesem Fall sollten stattdessen vorbereitete
   Anweisungen verwendet werden.
  </para>
  <caution>
   <title>Sicherheit: Der voreingestellte Zeichensatz</title>
   <para>
    Der Zeichensatz muss je nach Treiber entweder auf Serverebene oder in der
    Datenbankverbindung selbst eingestellt werden, damit er sich auf
    <methodname>PDO::quote</methodname> auswirkt. Weitere Informationen sind
    in der <link linkend="pdo.drivers">Treiberspezifischen Dokumentation</link>
    zu finden.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
      <listitem>
       <para>
        Die Zeichenkette, die in Anführungszeichen gesetzt werden soll
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
      <listitem>
       <para>
        Gibt Treibern, die andere Anführungszeichen verwenden, einen Hinweis
        auf den Datentyp. Zum Beispiel teilt
        <constant>PDO_PARAM_LOB</constant> dem Treiber mit, dass er binäre
        Daten maskieren soll.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt eine Zeichenkette in Anführungszeichen zurück, die theoretisch
   bedenkenlos an eine SQL-Anweisung übergeben werden kann, oder &false;,
   wenn der Treiber diese Anführungszeichen nicht unterstützt.
  </para>
 </refsect1>

 <!-- Use when ERRORS exist
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   When does this function throw E_* level errors, or exceptions?
  </para>
 </refsect1>
 -->

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Schützen einer normalen Zeichenkette</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Einfache Zeichenkette */
$string = 'Nice';
print "Nicht abgeschirmte Zeichenkette: $string\n";
print "Abgeschirmte Zeichenkette: " . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Nicht abgeschirmte Zeichenkette: Nice
Abgeschirmte Zeichenkette: 'Nice'
]]>
    </screen>
   </example>
   <example>
    <title>Schützen einer gefährlichen Zeichenkette</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Gefährliche Zeichenkette */
$string = 'Naughty \' string';
print "Nicht abgeschirmte Zeichenkette: $string\n";
print "Abgeschirmte Zeichenkette: " . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Nicht abgeschirmte Zeichenkette: Naughty ' string
Abgeschirmte Zeichenkette: 'Naughty '' string'
]]>
    </screen>
   </example>
   <example>
    <title>Schützen einer komplexen Zeichenkette</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Komplexe Zeichenkette */
$string = "Co'mpl''ex \"st'\"ring";
print "Nicht abgeschirmte Zeichenkette: $string\n";
print "Abgeschirmte Zeichenkette: " . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Nicht abgeschirmte Zeichenkette: Co'mpl''ex "st'"ring
Abgeschirmte Zeichenkette: 'Co''mpl''''ex "st''"ring'
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
