<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 082ddc19f53e6e254010de1a1fbbe485ff744ec1 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdo.query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::query</refname>
  <refpurpose>
   Bereitet eine SQL-Anweisung ohne Platzhalter vor und führt sie aus
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDO">
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>fetchMode</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDO">
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>fetchMode</parameter><initializer>PDO::FETCH_COLUMN</initializer></methodparam>
   <methodparam><type>int</type><parameter>colno</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDO">
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>fetchMode</parameter><initializer>PDO::FETCH_CLASS</initializer></methodparam>
   <methodparam><type>string</type><parameter>classname</parameter></methodparam>
   <methodparam><type>array</type><parameter>constructorArgs</parameter></methodparam>
  </methodsynopsis>

  <methodsynopsis role="PDO">
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>fetchMode</parameter><initializer>PDO::FETCH_INTO</initializer></methodparam>
   <methodparam><type>object</type><parameter>object</parameter></methodparam>
  </methodsynopsis>
  <para>
   Mit <methodname>PDO::query</methodname> wird eine SQL-Anweisung in einem
   einzigen Funktionsaufruf vorbereitet und ausgeführt und die Anweisung als
   <classname>PDOStatement</classname>-Objekt zurückgegeben.
  </para>
  <para>
   Bei einer Abfrage, die mehrmals ausgeführt werden soll, wird die Effizienz
   verbessert, indem ein <classname>PDOStatement</classname>-Objekt mit
   <methodname>PDO::prepare</methodname> vorbereitet und die Anweisung mit
   mehreren Aufrufen von <methodname>PDOStatement::execute</methodname>
   ausgeführt wird.
  </para>
  <para>
   Wenn vor dem nächsten Aufruf von <methodname>PDO::query</methodname> nicht
   alle Daten einer Ergebnismenge abgerufen werden, schlägt der Aufruf
   möglicherweise fehl. Deshalb sollten die mit dem
   <classname>PDOStatement</classname>-Objekt verbundenen Datenbankressourcen
   mittels <methodname>PDOStatement::closeCursor</methodname> freigegeben
   werden, bevor <methodname>PDO::query</methodname> erneut aufgerufen wird.
  </para>
  <note>
   <para>
    Wenn <parameter>query</parameter> Platzhalter enthält, muss die Anweisung
    mit der Methode <methodname>PDO::prepare</methodname> vorbereitet und mit
    der Methode <methodname>PDOStatement::execute</methodname> ausgeführt
    werden.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>query</parameter></term>
      <listitem>
       <para>
        Die SQL-Anweisung, die vorbereitet und ausgeführt werden soll
       </para>
       <para>
        Wenn das SQL Platzhalter enthält, müssen stattdessen die Methoden
        <methodname>PDO::prepare</methodname> und
        <methodname>PDOStatement::execute</methodname> verwendet werden. Wenn
        es der Treiber unterstützt, kann das SQL alternativ mittels
        <methodname>PDO::quote</methodname> mit korrekt formatierten Daten
        manuell vorbereitet werden, bevor <methodname>PDO::query</methodname>
        aufgerufen wird.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>fetchMode</parameter></term>
      <listitem>
       <para>
        Der voreingestellte Abrufmodus für das zurückgegebene
        <classname>PDOStatement</classname>. Es muss eine der
        <link linkend="pdo.constants"><literal>PDO::FETCH_*</literal></link>-Konstanten
        sein.
       </para>
       <para>
        Wenn dieses Argument an die Funktion übergeben wird, werden die
        restlichen Argumente so behandelt, als ob
        <methodname>PDOStatement::setFetchMode</methodname> für das
        resultierende Anweisungsobjekt aufgerufen wurde. Die nachfolgenden
        Argumente hängen vom gewählten Abrufmodus ab.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt ein <classname>PDOStatement</classname>-Objekt zurück.
   &return.falseforfailure;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>SQL ohne Platzhalter kann mit <methodname>PDO::query</methodname> ausgeführt werden</title>
    <programlisting role="php">
<![CDATA[
<?php
$sql = 'SELECT name, color, calories FROM fruit ORDER BY name';
foreach ($conn->query($sql) as $row) {
    print $row['name'] . "\t";
    print $row['color'] . "\t";
    print $row['calories'] . "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
apple   red     150
banana  yellow  250
kiwi    brown   75
lemon   yellow  25
orange  orange  300
pear    green   150
watermelon      pink    90
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::exec</methodname></member>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
