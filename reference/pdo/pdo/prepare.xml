<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 082ddc19f53e6e254010de1a1fbbe485ff744ec1 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdo.prepare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::prepare</refname>
  <refpurpose>
   Bereitet eine Anweisung zur Ausführung vor und liefert ein Anweisungsobjekt
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDO">
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::prepare</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   Bereitet eine SQL-Anweisung vor, die von der Methode
   <methodname>PDOStatement::execute</methodname> ausgeführt werden soll. Die
   Vorlage für eine Anweisung kann null oder mehr benannte (:name) oder mit
   Fragezeichen (?) versehene Platzhalter für Parameter enthalten, die bei der
   Ausführung der Anweisung durch reale Werte ersetzt werden. Benannte und
   Fragezeichen-Parameter dürfen nicht gleichzeitig in derselben
   Anweisungsvorlage verwendet werden, sondern nur eine der beiden Varianten.
   Diese Parameter werden verwendet, um die Benutzereingaben zu binden.
   Benutzerangaben sollten niemals direkt in die Abfrage aufgenommen werden.
  </para>
  <para>
   Für jeden Wert, der beim Aufruf von
   <methodname>PDOStatement::execute</methodname> an die Anweisung übergeben
   werden soll, muss ein eindeutiger Platzhalter angegeben werden. Ein
   benannter Platzhalter darf nur dann mehrfach verwendet werden, wenn der
   Emulationsmodus aktiviert ist.
  </para>
  <note>
   <para>
    Die Platzhalter für die Parameter können nur ein vollständiges
    Datenliteral darstellen. Es ist nicht möglich, einen Teil eines Literals,
    ein Schlüsselwort, einen Bezeichner oder einen beliebigen Teil einer
    Abfrage an einen Parameter zu binden. So können zum Beispiel in einer
    IN()-Klausel einer SQL-Anweisung nicht mehrere Werte an einen einzigen
    Parameter gebunden werden.
   </para>
  </note>
  <para>
   Mittels <methodname>PDO::prepare</methodname> und
   <methodname>PDOStatement::execute</methodname> kann der Treiber bei
   Anweisungen, die mehrfach mit unterschiedlichen Parameterwerten ausgeführt
   werden, die Leistung einer Anwendung optimieren, indem er die
   Zwischenspeicherung des Abfrageplans und der Metainformationen auf Client-
   und/oder Serverseite aushandelt. Außerdem trägt dies dazu bei, Angriffe
   durch SQL-Injection zu verhindern, weil die Parameter nicht mehr manuell
   maskiert und in Anführungszeichen gesetzt werden müssen.
  </para>
  <para>
   Bei Treibern, die diese nicht unterstützen, emuliert PDO vorbereitete
   Anweisungen/gebundene Parameter und kann außerdem benannte oder mit
   Fragezeichen versehene Parametermarkierungen in eine geeignetere Form
   umwandeln, wenn der Treiber zwar die eine, nicht aber die andere Form
   unterstützt.
  </para>
  <note>
   <simpara>
    Der Parser, der für emulierte vorbereitete Anweisungen verwendet wird und
    die benannten oder durch Fragezeichen angegebenen Parameter umschreibt,
    unterstützt die nicht standardmäßige Maskierung einfacher und doppelter
    Anführungszeichen durch Backslashes. Dies hat zur Folge, dass
    abschließende Anführungszeichen, denen ein Backslash unmittelbar
    vorausgeht, nicht als solche erkannt werden, was dazu führen kann, dass
    Parameter falsch erkannt werden und die vorbereitete Anweisung bei ihrer
    Ausführung fehlschlägt. Um dies zu umgehen, sollten für solche
    SQL-Abfragen keine emulierten vorbereiteten Anweisungen verwendet werden.
    Außerdem sollte ein vom Treiber nativ unterstützter Parameterstil
    verwendet werden, um ein Umschreiben der Parameter zu vermeiden.
   </simpara>
  </note>
  <para>
   Seit PHP 7.4.0 können Fragezeichen durch Verdoppeln maskiert werden. Das
   bedeutet, dass die Zeichenkette <literal>??</literal> beim Senden der
   Abfrage an die Datenbank in <literal>?</literal> übersetzt wird.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       Dies muss eine für den jeweiligen Datenbankserver gültige Vorlage für
       eine SQL-Anweisung sein.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Dieses Array enthält ein oder mehrere Schlüssel=&gt;Wert-Paare, um die
       Werte der Attribute des von dieser Methode zurückgegebenen
       PDOStatement-Objekts zu setzen. Am häufigsten wird dies verwendet, um
       den Wert von <constant>PDO::ATTR_CURSOR</constant> für einen
       scrollbaren Cursor auf <constant>PDO::CURSOR_SCROLL</constant> zu
       setzen. Einige Treiber haben treiberspezifische Optionen, die während
       der Vorbereitung gesetzt werden können.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Wenn der Datenbankserver die Anweisung erfolgreich vorbereitet hat, gibt
   <methodname>PDO::prepare</methodname> ein
   <classname>PDOStatement</classname>-Objekt zurück. Schlägt die Vorbereitung
   fehl, gibt <methodname>PDO::prepare</methodname> &false; zurück oder löst
   eine <classname>PDOException</classname> aus (abhängig von der
   <link linkend="pdo.error-handling">Fehlerbehandlung</link>).
  </para>
  <note>
   <para>
    Da emulierte vorbereitete Anweisungen nicht mit dem Datenbankserver
    kommunizieren, überprüft <methodname>PDO::prepare</methodname> die
    Anweisung nicht.
   </para>
  </note>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title>Vorlage für eine SQL-Anweisung mit benannten Parametern</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Ausführen einer vorbereiteten Anweisung durch Übergabe eines Arrays von Werten */
$sql = 'SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour';
$sth = $dbh->prepare($sql, [PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY]);
$sth->execute(['calories' => 150, 'colour' => 'red']);
$red = $sth->fetchAll();
/* Den Array-Schlüsseln kann auch ein Doppelpunkt ":" vorangestellt werden (optional) */
$sth->execute([':calories' => 175, ':colour' => 'yellow']);
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Vorlage für eine SQL-Anweisung mit Fragezeichen als Platzhalter</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Ausführen einer vorbereiteten Anweisung durch Übergabe eines Arrays von Werten */
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->execute([150, 'red']);
$red = $sth->fetchAll();
$sth->execute([175, 'yellow']);
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Vorlage für eine SQL-Anweisung mit maskierten Fragezeichen</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Hinweis: dies ist nur bei PostgreSQL-Datenbanken möglich */
$sth = $dbh->prepare('SELECT * FROM issues WHERE tag::jsonb ?? ?');
$sth->execute(['feature']);
$featureIssues = $sth->fetchAll();
$sth->execute(['performance']);
$performanceIssues = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::exec</methodname></member>
    <member><methodname>PDO::query</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
