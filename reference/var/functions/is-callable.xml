<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 83a17a7324c2597bd6385148abf19f76127229f5 Maintainer: nobody Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 1.0 Reviewer: samesch -->
<refentry xml:id="function.is-callable" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>is_callable</refname>
  <refpurpose>
   Prüft, ob ein Wert als Funktion aus dem aktuellen Bereich aufgerufen werden kann.
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>is_callable</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">callable_name</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Prüft, ob ein Wert ein <type>callable</type> ist.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Der zu prüfende Wert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>syntax_only</parameter></term>
     <listitem>
      <para>
       Wenn dieser Parameter auf &true; gesetzt wird, prüft die Funktion nur,
       ob <parameter>value</parameter> eine Funktion oder Methode
       enthalten könnte. Nur einfache Variablen, die keinen String enthalten,
       werden zurückgewiesen, oder Arrays, die nicht die richtige Struktur
       haben, um als Callback verwendet werden zu können. Gültige Arrays
       müssen zwei Elemente haben, von denen der erste ein Objekt oder String
       und der zweite ein String ist.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callable_name</parameter></term>
     <listitem>
      <para>
       Hier wird der "aufrufbare Name" abgelegt. Für das Beispiel weiter unten
       ist dies "someClass::someMethod". Es ist zu beachten, dass dies keine
       statische Methode ist, auch wenn die Syntax das nahelegt.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt &true; zurück, wenn <parameter>value</parameter> aufrufbar ist, sonst
   &false;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>is_callable</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
// Wie man prüft, ob eine Variable als Funktion aufgerufen werden kann

//
// Eine einfache Variable, die eine Funktion enthält
//

function someFunction()
{
}

$functionVariable = 'someFunction';

var_dump(is_callable($functionVariable, false, $callable_name));  // bool(true)

echo $callable_name, "\n";  // someFunction

//
// Ein Array, das eine Methode enthält
//

class someClass {

  function someMethod()
  {
  }

}

$anObject = new someClass();

$methodVariable = array($anObject, 'someMethod');

var_dump(is_callable($methodVariable, true, $callable_name));  //  bool(true)

echo $callable_name, "\n";  //  someClass::someMethod

?>
]]>
    </programlisting>
   </example>
   <example>
    <title><function>is_callable</function> und Konstruktoren</title>
    <simpara>
     <function>is_callable</function> meldet Konstruktoren als nicht
     aufrufbar.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function __construct() {}
    public function foo() {}
}

var_dump(
    is_callable(array('Foo', '__construct')),
    is_callable(array('Foo', 'foo'))
);
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
bool(false)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <simplelist>
   <member>
    Ein Objekt ist immer aufrufbar, wenn es
    <link linkend="object.invoke">__invoke()</link> implementiert und diese
    Methode im aktuellen Bereich sichtbar ist.
   </member>
   <member>
    Ein Klassenname ist aufrufbar, wenn er
    <link linkend="object.callstatic">__callStatic()</link> implementiert.
   </member>
   <member>
    Wenn ein Objekt <link linkend="object.call">__call()</link> implementiert,
    dann wird diese Funktion für jede Methode dieses Objekts &true;
    zurückgeben, auch wenn die Methode nicht definiert ist.
   </member>
   <member>
    Diese Funktion kann Autoloading auslösen, wenn sie mit dem Namen einer
    Klasse aufgerufen wird.
   </member>
  </simplelist>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>function_exists</function></member>
    <member><function>method_exists</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
