<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9caac4c5cce859b4ae5d497972442fcfaa840d81 Maintainer: hholzgra Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: de9c65c91ff1710d8b2d2ec955caea0162679305 Reviewer: samesch -->
<refentry xml:id="function.error-reporting" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>error_reporting</refname>
  <refpurpose>Gibt an, welche PHP-Fehlermeldungen gemeldet werden</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>error_reporting</methodname>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>error_level</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Mit <function>error_reporting</function> wird die Direktive
   <link linkend="ini.error-reporting">error_reporting</link> zur Laufzeit des
   Programms gesetzt. In PHP gibt es viele Stufen für die Anzeige von
   Fehlermeldungen, die mit dieser Funktion für die Dauer (Laufzeit) des
   Skripts eingestellt werden kann. Wenn das optionale Argument
   <parameter>error_level</parameter> nicht übergeben wird, gibt
   <function>error_reporting</function> die aktuelle Stufe der Fehlermeldungen
   zurück.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>error_level</parameter></term>
     <listitem>
      <para>
       Die neue Stufe von
       <link linkend="ini.error-reporting">error_reporting</link>. Es können
       sowohl eine numerische Bitmaske als auch benannte Konstanten übergeben
       werden. Der Einsatz benannter Konstanten wird empfohlen, um die
       Kompatibilität mit zukünftigen Versionen sicherzustellen. Wann immer
       Konstanten für Fehlerstufen hinzugefügt werden, erweitert sich der
       genutzte Integerbereich, sodass ältere Integerkonstanten nicht
       unbedingt weiter das erwartete Verhalten zeigen.
      </para>
      <para>
       Die verfügbaren Konstanten und die Bedeutungen der jeweiligen
       Fehlerstufe sind im Abschnitt
       <link linkend="errorfunc.constants">Vordefinierte Konstanten</link>
       beschrieben.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt das Level von
   <link linkend="ini.error-reporting">error_reporting</link> zurück,
   <emphasis>bevor</emphasis> es auf <parameter>error_level</parameter>
   geändert wird.
  </para>
  <note>
   <simpara>
    Der
    <link linkend="language.operators.errorcontrol">Fehlerkontroll</link>-Operator
    <literal>@</literal> ändert den Wert von <parameter>error_level</parameter>
    während der Fehlerbehandlung.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>error_level</parameter> ist nun nullable (akzeptiert den
       &null;-Wert).
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>error_reporting</function>-Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php

// Fehlermeldungen komplett abschalten
error_reporting(0);

// Nur einfache Fehler melden
error_reporting(E_ERROR | E_WARNING | E_PARSE);

// E_NOTICE ist sinnvoll, um uninitialisierte oder
// falsch geschriebene Variablen zu entdecken
error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);

// Melde alle Fehler außer E_NOTICE
error_reporting(E_ALL & ~E_NOTICE);

// Melde alle PHP-Fehler
error_reporting(E_ALL);

// Melde alle PHP-Fehler
error_reporting(-1);

// Dies entspricht error_reporting(E_ALL);
ini_set('error_reporting', E_ALL);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <tip>
   <simpara>
    Durch Übergeben des Wertes <literal>-1</literal> werden alle möglichen
    Fehler angezeigt, auch wenn neue Level in zukünftigen PHP-Versionen
    hinzugefügt werden. Das Verhalten ist äquivalent zur Übergabe der
    Konstante <constant>E_ALL</constant>.
   </simpara>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>Die Direktive <link linkend="ini.display-errors">display_errors</link></member>
    <member>Die Direktive <link linkend="ini.html-errors">html_errors</link></member>
    <member>Die Direktive <link linkend="ini.xmlrpc-errors">xmlrpc_errors</link></member>
    <member>Der <link linkend="language.operators.errorcontrol">Operator für die Fehlerkontrolle</link></member>
    <member><function>ini_set</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
