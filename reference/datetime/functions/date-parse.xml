<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5c951013ca04161992efed8b86fb40f55669958e Maintainer: samesch Status: wip -->
<!-- Reviewed: no -->
<refentry xml:id="function.date-parse" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>date_parse</refname>
  <refpurpose>Liefert ein assoziatives Array mit detaillierten Informationen zu einem gegebenen Datum/Zeitpunkt</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>date_parse</methodname>
   <methodparam><type>string</type><parameter>datetime</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>date_parse</function> wertet die angegebene Zeichenkette
   <parameter>datetime</parameter> nach den gleichen Regeln aus wie
   <function>strtotime</function> und
   <function>DateTimeImmutable::__construct</function>. Anstelle eines
   Unix-Zeitstempels (mit <function>strtotime</function>) oder eines
   <classname>DateTimeImmutable</classname>-Objekts (mit
   <function>DateTimeImmutable::__construct</function>) gibt diese Funktion
   ein assoziatives Array mit den Informationen zurück, die sie aus dem
   angegebenen <parameter>datetime</parameter> ermitteln konnte.
  </para>
  <para>
   Wenn über eine bestimmte Gruppe von Elementen keine Informationen gefunden
   werden können, werden diese Array-Elemente auf &false; gesetzt oder sie
   fehlen. Wenn sie benötigt werden, um einen Zeitstempel oder ein
   <classname>DateTimeImmutable</classname>-Objekt aus dieser
   <parameter>datetime</parameter>-Zeichenkette zu konstruieren, können
   mehrere Felder auf einen anderen Wert als &false; gesetzt werden. Die
   Beispiele zeigen, wo dies der Fall ist.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>datetime</parameter></term>
     <listitem>
      <para>
       Datum und Uhrzeit in einem Format, das von
       <function>DateTimeImmutable::__construct</function> akzeptiert wird.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt bei Erfolg ein <type>Array</type> mit Informationen zu Datum und
   Uhrzeit zurück. &return.falseforfailure;
  </para>
  <para>
   The returned array has keys for <literal>year</literal>,
   <literal>month</literal>, <literal>day</literal>, <literal>hour</literal>,
   <literal>minute</literal>, <literal>second</literal>,
   <literal>fraction</literal>, and <literal>is_localtime</literal>.
  </para>
  <para>
   If <literal>is_localtime</literal> is present then
   <literal>zone_type</literal> indicates the type of timezone. For type
   <literal>1</literal> (UTC offset) the <literal>zone</literal>,
   <literal>is_dst</literal> fields are added; for type <literal>2</literal>
   (abbreviation) the fields <literal>tz_abbr</literal>,
   <literal>is_dst</literal> are added; and for type <literal>3</literal>
   (timezone identifier) the <literal>tz_abbr</literal>,
   <literal>tz_id</literal> are added.
  </para>
  <para>
   If relative time elements are present in the
   <parameter>datetime</parameter> string such as <literal>+3 days</literal>,
   the then returned array includes a nested array with the key
   <literal>relative</literal>. This array then contains the keys
   <literal>year</literal>, <literal>month</literal>, <literal>day</literal>,
   <literal>hour</literal>, <literal>minute</literal>,
   <literal>second</literal>, and if necessary <literal>weekday</literal>, and
   <literal>weekdays</literal>, depending on the string that was passed in.
  </para>
  <para>
   The array includes <literal>warning_count</literal> and
   <literal>warnings</literal> fields. The first one indicate how many
   warnings there were.
   The keys of elements <literal>warnings</literal> array indicate the
   position in the given <parameter>datetime</parameter> where the warning
   occurred, with the string value describing the warning itself.
  </para>
  <para>
   The array also contains <literal>error_count</literal> and
   <literal>errors</literal> fields. The first one indicate how many errors
   were found.
   The keys of elements <literal>errors</literal> array indicate the
   position in the given <parameter>datetime</parameter> where the error
   occurred, with the string value describing the error itself.
  </para>
  <warning>
   <para>
    The number of array elements in the <literal>warnings</literal> and
    <literal>errors</literal> arrays might be less than
    <literal>warning_count</literal> or <literal>error_count</literal> if they
    occurred at the same position.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Falls das Datums-/Zeitformat fehlerhaft ist, enthält das Element 'errors'
   die Fehlermeldungen.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Das Element <literal>zone</literal> des zurückgegebenen Arrays stellt
       nun Sekunden statt Minuten dar und das Vorzeichen ist umgekehrt. Zum
       Beispiel wird aus <literal>-120</literal> nun <literal>7200</literal>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Ein <function>date_parse</function>-Beispiel mit einer vollständigen
     <parameter>datetime</parameter>-Zeichenkette
    </title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(date_parse("2006-12-12 10:00:00.5"));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(12) {
  'year' => int(2006)
  'month' => int(12)
  'day' => int(12)
  'hour' => int(10)
  'minute' => int(0)
  'second' => int(0)
  'fraction' => double(0.5)
  'warning_count' => int(0)
  'warnings' => array(0) {
  }
  'error_count' => int(0)
  'errors' => array(0) {
  }
  'is_localtime' => bool(false)
}
]]>
    </screen>
   </example>
  </para>

  <para>
   Die Zeitzonen-Elemente werden nur angezeigt, wenn sie in der angegebenen
   <parameter>datetime</parameter>-Zeichenkette enthalten sind. In diesem Fall
   gibt es immer ein Element <literal>zone_type</literal> und ein paar andere,
   die von seinem Wert abhängen.
   <example>
    <title><function>date_parse</function> mit Zeitzonenkürzel</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(date_parse("June 2nd, 2022, 10:28:17 BST"));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(16) {
  'year' => int(2022)
  'month' => int(6)
  'day' => int(2)
  'hour' => int(10)
  'minute' => int(28)
  'second' => int(17)
  'fraction' => double(0)
  'warning_count' => int(0)
  'warnings' => array(0) {
  }
  'error_count' => int(0)
  'errors' => array(0) {
  }
  'is_localtime' => bool(true)
  'zone_type' => int(2)
  'zone' => int(0)
  'is_dst' => bool(true)
  'tz_abbr' => string(3) "BST"
}]]>
    </screen>
   </example>
   <example>
    <title><function>date_parse</function> mit Zeitzonenkennung</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(date_parse("June 2nd, 2022, 10:28:17 Europe/London"));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(14) {
  'year' => int(2022)
  'month' => int(6)
  'day' => int(2)
  'hour' => int(10)
  'minute' => int(28)
  'second' => int(17)
  'fraction' => double(0)
  'warning_count' => int(0)
  'warnings' => array(0) {
  }
  'error_count' => int(0)
  'errors' => array(0) {
  }
  'is_localtime' => bool(true)
  'zone_type' => int(3)
  'tz_id' => string(13) "Europe/London"
}]]>
    </screen>
   </example>
  </para>

  <para>
   Wenn eine kürzere <parameter>datetime</parameter>-Zeichenkette ausgewertet
   wird, stehen weniger Informationen zur Verfügung. In diesem Beispiel werden
   alle Bestandteile der Uhrzeit als &false; zurückgegeben.
   <example>
    <title><function>date_parse</function> mit einer minimalen Zeichenkette</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(date_parse("June 2nd, 2022"));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(12) {
  'year' => int(2022)
  'month' => int(6)
  'day' => int(2)
  'hour' => bool(false)
  'minute' => bool(false)
  'second' => bool(false)
  'fraction' => bool(false)
  'warning_count' => int(0)
  'warnings' => array(0) {
  }
  'error_count' => int(0)
  'errors' => array(0) {
  }
  'is_localtime' => bool(false)
}]]>
    </screen>
   </example>
  </para>

  <para>
   <link linkend="datetime.formats.relative">Relative Formate</link> haben
   keinen Einfluss auf die Werte, die aus absoluten Formaten gewonnen werden,
   sondern werden in das Element "relativ" eingefügt.
   <example>
    <title><function>date_parse</function> mit relativen Formaten</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(date_parse("2006-12-12 10:00:00.5 +1 week +1 hour"));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(13) {
  'year' => int(2006)
  'month' => int(12)
  'day' => int(12)
  'hour' => int(10)
  'minute' => int(0)
  'second' => int(0)
  'fraction' => double(0.5)
  'warning_count' => int(0)
  'warnings' => array(0) {
  }
  'error_count' => int(0)
  'errors' => array(0) {
  }
  'is_localtime' => bool(false)
  'relative' =>
  array(6) {
    'year' => int(0)
    'month' => int(0)
    'day' => int(7)
    'hour' => int(1)
    'minute' => int(0)
    'second' => int(0)
  }
}]]>
    </screen>
   </example>
  </para>

  <para>
   Einige Textbausteine, z. B. <literal>Thursday</literal>, setzen den
   Zeitanteil der Zeichenkette auf <literal>0</literal>. Wenn
   <literal>Thursday</literal> an
   <function>DateTimeImmutable::__construct</function> übergeben wird, führt
   dies ebenfalls dazu, dass hour, minute, second und fraction auf
   <literal>0</literal> gesetzt werden. Im folgenden Beispiel wird das
   Element year jedoch auf &false; belassen.
   <example>
    <title><function>date_parse</function> mit Nebeneffekten</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(date_parse("Thursday, June 2nd"));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(13) {
  'year' => bool(false)
  'month' => int(6)
  'day' => int(2)
  'hour' => int(0)
  'minute' => int(0)
  'second' => int(0)
  'fraction' => double(0)
  'warning_count' => int(0)
  'warnings' => array(0) {
  }
  'error_count' => int(0)
  'errors' => array(0) {
  }
  'is_localtime' => bool(false)
  'relative' =>
  array(7) {
    'year' => int(0)
    'month' => int(0)
    'day' => int(0)
    'hour' => int(0)
    'minute' => int(0)
    'second' => int(0)
    'weekday' => int(4)
  }
}]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>date_parse_from_format</function> - Ermittelt Informationen über das angegebene Datum anhand des angegebenen Formats</member>
    <member><function>checkdate</function> für die Überprüfung eines gregorianischen Datums</member>
    <member><function>getdate</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
