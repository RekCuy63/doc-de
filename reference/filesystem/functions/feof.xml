<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 0c9c2dd669fe9395eaa73d487fbd160f9057429a Maintainer: khp Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 0c9c2dd669fe9395eaa73d487fbd160f9057429a Reviewer: samesch -->
<refentry xml:id="function.feof" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>feof</refname>
  <refpurpose>Prüft, ob ein Dateizeiger am Ende der Datei steht</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>feof</methodname>
   <methodparam><type>resource</type><parameter>stream</parameter></methodparam>
  </methodsynopsis>
  <para>
   Prüft, ob ein Dateizeiger am Ende der Datei steht.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stream</parameter></term>
     <listitem>
      &fs.validfp.all;
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt &true; zurück, wenn der Dateizeiger an EOF (Dateiende) steht oder ein
   Fehler auftritt (inklusive Socket-Zeitüberschreitung); ansonsten wird
   &false; zurückgegeben.
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Wenn eine mit <function>fsockopen</function> geöffnete Verbindung nicht
    durch den Server geschlossen wurde, bleibt <function>feof</function>
    hängen. Um dies zu umgehen, siehe folgendes Beispiel:
    <example>
     <title>Handhabung von Zeitüberschreitungen mit <function>feof</function></title>
     <programlisting role="php">
<![CDATA[
<?php
function safe_feof($fp, &$start = NULL) {
 $start = microtime(true);

 return feof($fp);
}

/* Annahme: $fp wurde zuvor mit fsockopen() geöffnet */

$start = NULL;
$timeout = ini_get('default_socket_timeout');

while(!safe_feof($fp, $start) && (microtime(true) - $start) < $timeout)
{
 /* Verarbeiten */
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </warning>
  <warning>
   <para>
    Wenn der übergebene Dateizeiger nicht gültig ist, kann es zu einer
    Endlosschleife kommen, weil <function>feof</function> nicht &true;
    zurückgibt.
    <example>
     <title><function>feof</function>-Beispiel mit einem ungültigen Dateizeiger</title>
     <programlisting role="php">
<![CDATA[
<?php
// Wenn $file nicht gelesen werden kann oder nicht existiert, gibt fopen FALSE zurück
$file = @fopen("no_such_file", "r");

// Ein FALSE von fopen löst eine Warnung aus und führt hier zu einer Endlosschleife
while (!feof($file)) {
}

fclose($file);
?>
]]>
     </programlisting>
    </example>
   </para>
  </warning>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
