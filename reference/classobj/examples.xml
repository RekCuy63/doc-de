<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6f11457f11d91834e1240c3351d8c4e289371b6d Maintainer: hholzgra Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 1.0 Reviewer: samesch -->

<appendix xml:id="classobj.examples">
 &reftitle.examples;
 <para>
  In diesem Beispiel definieren wir zuerst eine Basisklasse und eine
  Erweiterung dieser Klasse. Die Basisklasse beschreibt ein beliebiges Gemüse,
  ob es essbar ist, sowie seine Farbe. Die Subklasse <varname>Spinat</varname>
  fügt eine Methode hinzu, um es zu kochen und eine weitere, um
  herauszufinden, ob es gekocht ist.
 </para>
 <para>
  <example>
   <title>Klassendefinitionen</title>
   <para><varname>Gemuese</varname></para>
   <programlisting role="php">
<![CDATA[
<?php

class Gemuese {
    public $essbar;

    public $farbe;

    public function __construct($essbar, $farbe = "grün")
    {
        $this->essbar = $essbar;
        $this->farbe = $farbe;
    }

    public function istEssbar()
    {
        return $this->essbar;
    }

    public function welcheFarbe()
    {
        return $this->farbe;
    }
}

?>
]]>
   </programlisting>
   <para><varname>Spinat</varname></para>
   <programlisting role="php">
<![CDATA[
<?php

class Spinat extends Gemuese {

    public $gekocht = false;

    public function __construct()
    {
        parent::__construct(true, "grün");
    }

    public function kocheEs()
    {
        $this->gekocht = true;
    }

    public function istGekocht()
    {
        return $this->gekocht;
    }
}

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Jetzt instantiieren wir zwei Objekte von diesen Klassen und geben
  Informationen über sie aus, einschließlich ihrer übergeordneten Klasse. Wir
  definieren auch einige Hilfsfunktionen, hauptsächlich um eine hübsche
  Ausgabe der Variablen zu erhalten.
 </para>
 <para>
  <example>
   <title>test_script.php</title>
   <programlisting role="php">
<![CDATA[
<?php

// Registrieren des Autoloaders zum Laden von Klassen
spl_autoload_register();

function zeigeEigenschaften($obj)
{
    foreach (get_object_vars($obj) as $prop => $val) {
        echo "\t$prop = $val\n";
    }
}

function zeigeMethoden($obj)
{
    $arr = get_class_methods(get_class($obj));
    foreach ($arr as $method) {
        echo "\tFunktion $method()\n";
    }
}

function objGehoertZu($obj, $class)
{
   if (is_subclass_of($obj, $class)) {
        echo "Objekt gehört zur Klasse " . get_class($obj);
        echo ", einer Subklasse von $class\n";
    } else {
        echo "Objekt gehört nicht zu einer Subklasse von $class\n";
    }
}

// Instantiiere zwei Objekte
$veggie = new Gemuese(true, "blau");
$leafy = new Spinat();

// Informationen über die Objekte ausgeben
echo "veggie: KLASSE " . get_class($veggie) . "\n";
echo "leafy: KLASSE " . get_class($leafy);
echo ", ELTERN " . get_parent_class($leafy) . "\n";

// Zeige Eigenschaften von veggie
echo "\nveggie: Eigenschaften\n";
zeigeEigenschaften($veggie);

// und Methoden von leafy
echo "\nleafy: Methoden\n";
zeigeMethoden($leafy);

echo "\nAbstammung:\n";
objGehoertZu($leafy, Spinat::class);
objGehoertZu($leafy, Gemuese::class);
?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
veggie: KLASSE Gemuese
leafy: KLASSE Spinat, ELTERN Gemuese

veggie: Eigenschaften
        essbar = 1
        farbe = blau

leafy: Methoden
        Funktion __construct()
        Funktion kocheEs()
        Funktion istGekocht()
        Funktion istEssbar()
        Funktion welcheFarbe()

Abstammung:
Objekt gehört nicht zu einer Subklasse von Spinat
Objekt gehört zur Klasse Spinat, einer Subklasse von Gemuese
]]>
   </screen>
   <para>
    Ein wichtiger Punkt im obigen Beispiel ist, dass das Objekt
    <varname>$leafy</varname> eine Instanz der Klasse
    <classname>Spinat</classname> ist, die eine Subklasse
    von <classname>Gemuese</classname> ist.
   </para>
  </example>
 </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
