<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 39752929cd4ab78db8a7310dfb328444c558df99 Maintainer: simp Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 39752929cd4ab78db8a7310dfb328444c558df99 Reviewer: samesch -->
<refentry xml:id="function.create-function" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>create_function</refname>
  <refpurpose>Erzeugt eine Funktion dynamisch durch Auswertung einer Zeichenkette mit Code</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  &warn.deprecated.function-7-2-0.removed-8-0-0;
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>create_function</methodname>
   <methodparam><type>string</type><parameter>args</parameter></methodparam>
   <methodparam><type>string</type><parameter>code</parameter></methodparam>
  </methodsynopsis>
  <para>
   Erzeugt aus den übergebenen Parametern dynamisch eine Funktion und gibt
   einen eindeutigen Namen für sie zurück.
  </para>
  <caution>
   <para>
    Diese Funktion führt intern <function>eval</function> aus und hat daher
    die gleichen Sicherheitsprobleme wie <function>eval</function>. Außerdem
    zeigt diese Funktion ein schlechtes Verhalten in Bezug auf Leistung und
    Speicherverbrauch, da die erzeugten Funktionen global sind und nicht mehr
    freigegeben werden können.
   </para>
   <para>
    Stattdessen sollten die nativ vorhandenen
    <link linkend="functions.anonymous">anonymen Funktionen</link> verwendet
    werden.
   </para>
  </caution>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   Normalerweise ist es ratsam, diese Parameter als Zeichenketten in
   <link linkend="language.types.string.syntax.single">einfachen Anführungszeichen</link>
   zu übergeben. Wenn sie in
   <link linkend="language.types.string.syntax.double">doppelten Anführungszeichen</link>
   übergeben werden, müssen die Variablennamen im Code sorgfältig maskiert
   werden, &zb; <literal>\$somevar</literal>.
   <variablelist>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
       Die Funktionsargumente in Form einer einzelnen durch Komma getrennten
       Zeichenkette.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>code</parameter></term>
     <listitem>
      <para>
       Der Code der Funktion.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt einen eindeutigen Funktionsnamen als Zeichenkette zurück.
   &return.falseforfailure; Es ist zu beachten, dass der Name ein nicht
   druckbares Zeichen enthält (<literal>"\0"</literal>), weshalb Vorsicht
   geboten ist, wenn der Name gedruckt oder in eine andere Zeichenkette
   eingefügt werden soll.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Dynamisches Erzeugen einer Funktion, mit
     <function>create_function</function> oder anonymen Funktionen
    </title>
    <para>
     Eine dynamisch erstellte Funktion kann verwendet werden, um (zum Beispiel)
     eine Funktion aus Informationen zu erstellen, die zur Laufzeit gesammelt
     wurden. Zuerst unter Verwendung von <function>create_function</function>:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$newfunc = create_function('$a,$b', 'return "ln($a) + ln($b) = " . log($a * $b);');
echo $newfunc(2, M_E) . "\n";
?>
]]>
    </programlisting>
    <para>
     Und nun der gleiche Code unter Verwendung einer
     <link linkend="functions.anonymous">anonymen Funktion</link>. Zu beachten
     ist, dass der Code und die Parameter nicht mehr in Zeichenketten
     eingebettet sind:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$newfunc = function($a,$b) { return "ln($a) + ln($b) = " . log($a * $b); };
echo $newfunc(2, M_E) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
ln(2) + ln(2.718281828459) = 1.6931471805599
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>
      Erstellen einer allgemeinen Verarbeitungsfunktion mit
      <function>create_function</function> oder anonymen Funktionen
    </title>
    <para>
     Eine andere Verwendungsmöglichkeit wäre, eine allgemeine
     Verarbeitungsfunktion zu erstellen, die eine Reihe von Operationen auf
     eine Liste von Parametern anwenden kann:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function process($var1, $var2, $farr)
{
    foreach ($farr as $f) {
        echo $f($var1, $var2) . "\n";
    }
}

// Nun erzeugen wir eine Reihe mathematischer Funktionen
$farr = array(
    create_function('$x,$y', 'return "etwas Trigonometrie: ".(sin($x) + $x*cos($y));'),
    create_function('$x,$y', 'return "eine Hypotenuse: ".sqrt($x*$x + $y*$y);'),
    create_function('$a,$b', 'if ($a >=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;}'),
    create_function('$a,$b', "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a);"),
    create_function('$a,$b', 'if ($a > 0 && $b != 0) {return "ln(a)/b = ".log($a)/$b; } else { return false; }')
);

echo "\nWir benutzen nun das erste Array von dynamischen Funktionen\n";
echo "Parameter: 2.3445, M_PI\n";
process(2.3445, M_PI, $farr);

// Nun erzeugen wir eine Reihe von Funktionen zur Bearbeitung von Zeichenketten
$garr = array(
    create_function('$b,$a', 'if (strncmp($a, $b, 3) == 0) return "** \"$a\" '.
    'und \"$b\"\n** sehen für mich gleich aus! (unter Betrachtung der ersten 3 Zeichen)";'),
    create_function('$a,$b', 'return "CRCs: " . crc32($a) . ", ".crc32($b);'),
    create_function('$a,$b', 'return "similar(a,b) = " . similar_text($a, $b, $p) . "($p%)";')
    );
echo "\nWir benutzen nun das zweite Array von dynamischen Funktionen\n";
process("Twas brilling and the slithy toves", "Twas the night", $garr);
?>
]]>
    </programlisting>
    <para>
     Hier ist noch einmal derselbe Code unter Verwendung einer
     <link linkend="functions.anonymous">anonymen Funktion</link>.
     Es ist zu beachten, dass die Variablennamen in diesem Code nicht mehr
     maskiert werden müssen, da sie sich nicht in einer Zeichenkette befinden.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function process($var1, $var2, $farr)
{
    foreach ($farr as $f) {
        echo $f($var1, $var2) . "\n";
    }
}

// Nun erzeugen wir eine Reihe mathematischer Funktionen
$farr = array(
    function($x,$y) { return "etwas Trigonometrie: ".(sin($x) + $x*cos($y)); },
    function($x,$y) { return "eine Hypotenuse: ".sqrt($x*$x + $y*$y); },
    function($a,$b) { if ($a >=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;} },
    function($a,$b) { return "min(b^2+a, a^2,b) = " . min($a*$a+$b, $b*$b+$a); },
    function($a,$b) { if ($a > 0 && $b != 0) {return "ln(a)/b = ".log($a)/$b; } else { return false; } }
);

echo "\nWir benutzen nun das erste Array von dynamischen Funktionen\n";
echo "Parameter: 2.3445, M_PI\n";
process(2.3445, M_PI, $farr);

// Nun erzeugen wir eine Reihe von Funktionen zur Bearbeitung von Zeichenketten
$garr = array(
    function($b,$a) { if (strncmp($a, $b, 3) == 0) return "** \"$a\" " .
        "und \"$b\"\n** sehen für mich gleich aus! (unter Betrachtung der ersten 3 Zeichen"; },
    function($a,$b) { return "CRCs: " . crc32($a) . ", ".crc32($b); },
    function($a,$b) { return "similar(a,b) = " . similar_text($a, $b, $p) . "($p%)"; }
);
echo "\nWir benutzen nun das zweite Array von dynamischen Funktionen\n";
process("Twas brilling and the slithy toves", "Twas the night", $garr);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Wir benutzen nun das erste Array von dynamischen Funktionen
Parameter: 2.3445, M_PI
etwas Trigonometrie: -1.6291725057799
eine Hypotenuse: 3.9199852871011
b*a^2 = 4.8103313314525
min(b^2+a, a^2,b) = 8.6382729035898
ln(a)/b = 0.27122299212594

Wir benutzen nun das zweite Array von dynamischen Funktionen
** "Twas the night" und "Twas brilling and the slithy toves"
** sehen für mich gleich aus! (unter Betrachtung der ersten 3 Zeichen)
CRCs: 3569586014, 342550513
similar(a,b) = 11(45.833333333333%)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Gebrauch der anonymen Funktionen als Callback-Funktion</title>
    <para>
     Wahrscheinlich liegt der häufigste Anwendungsfall für dynamische
     Funktionen darin, sie als Callbacks zu übergeben, also &zb; beim
     Gebrauch von <function>array_walk</function> oder
     <function>usort</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$av = array("the ", "a ", "that ", "this ");
array_walk($av, create_function('&$v,$k', '$v = $v . "mango";'));
print_r($av);
?>
]]>
    </programlisting>
    <para>
     Umgewandelt in eine
     <link linkend="functions.anonymous">anonyme Funktion</link>:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$av = array("the ", "a ", "that ", "this ");
array_walk($av, function(&$v,$k) { $v = $v . "mango"; });
print_r($av);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
  [0] => the mango
  [1] => a mango
  [2] => that mango
  [3] => this mango
)
]]>
    </screen>
    <para>
     Sortieren von Zeichenketten von der längsten zur kürzesten mit
     <function>create_function</function>:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$sv = array("small", "a big string", "larger", "it is a string thing");
echo "Original:\n";
print_r($sv);
echo "Sortiert:\n";
usort($sv, create_function('$a,$b','return strlen($b) - strlen($a);'));
print_r($sv);
?>
]]>
    </programlisting>
    <para>
     Umgewandelt in eine
     <link linkend="functions.anonymous">anonyme Funktion</link>:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$sv = array("small", "a big string", "larger", "it is a string thing");
echo "Original:\n";
print_r($sv);
echo "Sortiert:\n";
usort($sv, function($a,$b) { return strlen($b) - strlen($a); });
print_r($sv);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Original:
Array
(
  [0] => small
  [1] => a big string
  [2] => larger
  [3] => it is a string thing
)
Sortiert:
Array
(
  [0] => it is a string thing
  [1] => a big string
  [2] => larger
  [3] => small
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="functions.anonymous">Anonyme Funktionen</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
