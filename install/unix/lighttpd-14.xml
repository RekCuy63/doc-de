<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 7006df7c1fbc64457ac4011ae33309c3f3e5b202 Maintainer: nobody Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 7006df7c1fbc64457ac4011ae33309c3f3e5b202 Reviewer: samesch -->
<sect1 xml:id="install.unix.lighttpd-14" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Lighttpd 1.4 auf Unix-Systemen</title>

 <para>
  Dieser Abschnitt enthält Notizen und Hinweise zur Installtion von
  Lighttpd 1.4 für PHP auf Unix-Systemen.
 </para>

 <para>
  Vor der Installation von Lighttpd wird empfohlen, die Installationsanleitung
  der <link xlink:href="&url.lighttpd.doc;">Lighttpd-Dokumentation</link> zu
  lesen.
 </para>

 <para>
  FastCGI ist die bevorzugte SAPI, um PHP mit Lighttpd zu verbinden. FastCGI
  wird in php-cgi automagisch aktiviert.
 </para>

 <sect2 xml:id="install.unix.lighttpd-14.lighttpd-spawn">
  <title>Lighttpd einen php-Prozess starten lassen</title>

  <para>
   Um Lighttpd so zu konfigurieren, dass es sich mit PHP verbindet und
   FastCGI-Prozesse startet, muss die Datei <filename>lighttpd.conf</filename>.
   editiert werden. Auf einem lokalen System werden vorzugsweise Sockets für
   die Verbindung zu FastCGI-Prozessen verwendet.
  </para>

  <example>
   <title>Ein Teil der lighttpd.conf</title>
   <screen>
<![CDATA[
server.modules += ( "mod_fastcgi" )

fastcgi.server = ( ".php" =>
  ((
    "socket" => "/tmp/php.socket",
    "bin-path" => "/usr/local/bin/php-cgi",
    "bin-environment" => (
      "PHP_FCGI_CHILDREN" => "16",
      "PHP_FCGI_MAX_REQUESTS" => "10000"
    ),
    "min-procs" => 1,
    "max-procs" => 1,
    "idle-timeout" => 20
  ))
)
]]>

   </screen>
  </example>

  <para>
   Die Direktive <filename>bin-path</filename> erlaubt es Lighttpd,
   FastCGI-Prozesse dynamisch zu erzeugen. PHP erzeugt die Kindprozesse
   entsprechend der Umgebungsvariable <envar>PHP_FCGI_CHILDREN</envar>. Die
   Direktive <literal>bin-environment</literal> definiert die Umgebung für die
   erzeugten Prozesse. PHP beendet einen Kindprozess, nachdem die in
   <envar>PHP_FCGI_MAX_REQUESTS</envar> festgelegte Anzahl von Anfragen
   erreicht ist. Die Direktiven <literal>min-procs</literal> und
   <literal>max-procs</literal> sollten bei PHP generell vermieden werden. PHP
   verwaltet seine eigenen Kindprozesse und OpCode-Caches wie APC nutzen nur
   die von PHP verwalteten Kindprozesse. Wenn <literal>min-procs</literal> auf
   einen Wert größer <literal>1</literal> gesetzt ist, wird die Anzahl der
   PHP-Responder mit <envar>PHP_FCGI_CHILDREN</envar> multipliziert
   (2 min-procs * 16 Kindprozesse ergibt 32 Responder).
  </para>
 </sect2>

 <sect2 xml:id="install.unix.lighttpd-14.spawn-fcgi">
  <title>Prozesse mit spawn-fcgi erzeugen</title>

  <para>
   Lighttpd stellt das Programm spawn-fcgi zur Verfügung, um das Erzeugen von
   FastCGI-Prozessen zu vereinfachen.
  </para>
 </sect2>

 <sect2 xml:id="install.unix.lighttpd-14.spawn-php">
  <title>php-cgi starten</title>

  <para>
   Es ist möglich, Prozesse ohne spawn-fcgi zu starten, jedoch ist dafür etwas
   Arbeit nötig. Die Umgebungsvariable <envar>PHP_FCGI_CHILDREN</envar>
   definiert, wieviele Kindprozesse PHP erzeugt, um eingehende Anfragen zu
   bearbeiten. <envar>PHP_FCGI_MAX_REQUESTS</envar> definiert, wie lange (in
   Anfragen) jeder Kindprozess existiert. Hier ist ein einfaches Bash-Skript,
   um das Erzeugen von PHP-Respondern zu vereinfachen.
  </para>

  <example>
   <title>FastCGI-Responder erzeugen</title>
   <screen>
<![CDATA[
#!/bin/sh

# Ort des php-cgi-Programms
PHP=/usr/local/bin/php-cgi

# Ort der PID-Datei
PHP_PID=/tmp/php.pid

# Bindung an eine Adresse
#FCGI_BIND_ADDRESS=10.0.1.1:10000
# Bindung an einen Domain-Socket
FCGI_BIND_ADDRESS=/tmp/php.sock

PHP_FCGI_CHILDREN=16
PHP_FCGI_MAX_REQUESTS=10000

env -i PHP_FCGI_CHILDREN=$PHP_FCGI_CHILDREN \
       PHP_FCGI_MAX_REQUESTS=$PHP_FCGI_MAX_REQUESTS \
       $PHP -b $FCGI_BIND_ADDRESS &

echo $! > "$PHP_PID"

]]>
   </screen>
  </example>
 </sect2>

 <sect2 xml:id="install.unix.lighttpd-14.remote-fcgi">
  <title>Mit entfernten FCGI-Instanzen verbinden</title>

  <para>
   Um Anwendungen besser zu skalieren, können FastCGI-Instanzen auf mehreren
   entfernten Rechnern gestartet werden.
  </para>

  <example>
   <title>Mit entfernten FCGI-Instanzen verbinden</title>
   <screen>
<![CDATA[
fastcgi.server = ( ".php" =>
   (( "host" => "10.0.0.2", "port" => 1030 ),
    ( "host" => "10.0.0.3", "port" => 1030 ))
)
]]>
   </screen>
  </example>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
