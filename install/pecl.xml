<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ab5ec7cab27bb085fb43dd5fa75cacc6500e5fb0 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="install.pecl" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Installation der PECL-Erweiterungen</title>

 <sect1 xml:id="install.pecl.intro">
  <title>Einführung in die PECL-Installationen</title>
  <simpara>
   <link xlink:href="&url.pecl;">PECL</link> ist eine Sammlung von
   PHP-Erweiterungen, die über das Paketierungssystem
   <link xlink:href="&url.php.pear;">PEAR</link> zur Verfügung gestellt
   werden. Dieser Abschnitt des Handbuchs soll zeigen, wie man
   PECL-Erweiterungen bekommt und installiert.
  </simpara>
  <simpara>
   Diese Anweisungen gehen davon aus, dass <literal>/your/phpsrcdir/</literal>
   der Pfad zum Quellcode der PHP-Distribution ist und dass
   <literal>extname</literal> der Name der PECL-Erweiterung ist. Die Angaben
   müssen entsprechend angepasst werden. Diese Anweisungen setzen außerdem
   voraus, dass man mit dem
   <link xlink:href="&url.php.pear.cli;">pear-Befehl</link> vertraut ist. Die
   Informationen des PEAR-Handbuchs zum Befehl <literal>pear</literal> gelten
   auch für den Befehl <literal>pecl</literal>.
  </simpara>
  <simpara>
   Um brauchbar zu sein, muss eine dynamische Erweiterung kompiliert,
   installiert und geladen werden. Die im Folgenden beschriebenen Methoden
   bieten Ihnen verschiedene Anweisungen, wie Sie die Erweiterungen
   erstellen und installieren können, laden diese aber nicht automatisch.
   Erweiterungen können über eine
   <link linkend="ini.extension">extension</link>-Direktive in der Datei
   &php.ini; oder mit der Funktion <function>dl</function> geladen werden.
  </simpara>
  <simpara>
   Wenn PHP-Module gebaut werden, ist es wichtig, die richtigen Versionen der
   benötigten Werkzeuge (autoconf, automake, libtool etc.) zu haben. Für
   Details zu den benötigten Werkzeugen und den benötigten Versionen siehe die
   <link xlink:href="&url.php.anongit;">Anweisungen für Git</link>.
  </simpara>
 </sect1>

 <sect1 xml:id="install.pecl.downloads">
  <title>Herunterladen der PECL-Erweiterungen</title>
  <simpara>
   Es gibt mehrere Möglichkeiten, PECL-Erweiterungen herunterzuladen, &zb;:
  </simpara>
  <itemizedlist>
   <listitem>
    <simpara>
     Mit dem Befehl <literal>pecl install extname</literal> wird der Code der
     Erweiterung automatisch heruntergeladen, sodass in diesem Fall kein
     gesonderter Download erforderlich ist.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link xlink:href="&url.pecl;">&url.pecl;</link>
    </simpara>
    <simpara>
     Die PECL-Website enthält Informationen über die verschiedenen
     Erweiterungen, die vom PHP Development Team angeboten werden. Die dort
     bereitgestellten Informationen umfassen ChangeLog, Versionshinweise,
     Anforderungen und andere ähnliche Details.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>pecl download extname</literal>
    </simpara>
    <simpara>
     PECL-Erweiterungen, deren Versionen auf der PECL-Website aufgeführt sind,
     können mit dem Befehl <link xlink:href="&url.php.pear.cli;">pecl</link>
     heruntergeladen und installiert werden. Es können auch bestimmte
     Versionen angegeben werden.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <acronym>git</acronym>
    </simpara>
    <simpara>
     Viele PECL-Erweiterungen sind auf GitHub zu finden.
     <!-- TODO Expand -->
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <acronym>SVN</acronym>
    </simpara>
    <simpara>
     Einige PECL-Erweiterungen sind auch in <acronym>SVN</acronym> verfügbar.
     Eine webbasierte Ansicht ist unter
     <link xlink:href="&url.php.svn;pecl/">&url.php.svn;pecl/</link> zu
     finden. Um direkt von <acronym>SVN</acronym> herunterzuladen, kann die
     folgende Befehlsfolge verwendet werden:
    </simpara>
    <para>
     <screen>
$ svn checkout http://svn.php.net/repository/pecl/extname/trunk extname
     </screen>
    </para>
   </listitem>
   <listitem>
    <simpara>
     Downloads für Windows
    </simpara>
    <simpara>
     Das PHP-Projekt bietet für die meisten PECL-Erweiterungen auf der
     jeweiligen Paket-Seite kompilierte Windows-DLLs an.
    </simpara>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 xml:id="install.pecl.windows">
  <title>Installation einer PHP-Erweiterung unter Windows</title>
  <para>
   Unter Windows gibt es zwei Möglichkeiten, eine PHP-Erweiterung zu laden:
   Entweder sie wird in PHP einkompiliert oder sie wird als DLL geladen. Eine
   vorkompilierte Erweiterung zu laden ist die einfachste und auch die
   bevorzugte Methode.
  </para>
  <para>
   Um eine Erweiterung zu laden, muss sie als ".dll"-Datei auf dem System
   vorhanden sein. Alle Erweiterungen werden automatisch und regelmäßig von
   der PHP-Gruppe kompiliert (bezüglich des Downloads siehe nächster
   Abschnitt).
  </para>
  <para>
   Informationen darüber, wie Erweiterungen beim Kompilieren in PHP
   eingebunden werden, sind in der Dokumentation zum
   <link linkend="install.windows.building">Erstellen aus dem Quellcode</link>
   zu finden.
  </para>
  <para>
   Um eine eigenständige Erweiterung (auch DLL-Datei genannt) zu kompilieren,
   siehe die Dokumentation
   <link linkend="install.windows.building">Erstellen aus dem Quellcode</link>.
   Wenn die DLL-Datei weder in der PHP-Distribution noch in PECL enthalten
   ist, muss sie möglicherweise kompiliert werden, bevor die Erweiterung
   verwendet werden kann.
  </para>
  <sect2 xml:id="install.pecl.windows.find">
   <title>Wo finde ich eine Erweiterung?</title>
   <para>
    PHP-Erweiterungen heißen normalerweise "php_*.dll" (wobei der Stern für
    den Namen der Erweiterung steht) und befinden sich im Ordner "PHP\ext".
   </para>
   <para>
    PHP wird mit den Erweiterungen ausgeliefert, die für die meisten
    Entwickler am nützlichsten sind. Sie werden als Kern-Erweiterungen (oder
    "Core"-Erweiterungen) bezeichnet.
   </para>
   <para>
    Wenn Sie jedoch Funktionen benötigen, die von keiner Kern-Erweiterung zur
    Verfügung gestellt werden, finden Sie die benötigte Erweiterung
    möglicherweise in <link xlink:href="&url.pecl;">PECL</link>. Die PHP
    Extension Community Library (PECL) ist eine Sammlung von
    PHP-Erweiterungen, die eine Liste aller bekannten Erweiterungen sowie
    einen Hosting-Service für die Entwicklung und das Herunterladen dieser
    PHP-Erweiterungen bereitstellt.
   </para>
   <para>
    Wenn Sie eine Erweiterung für Ihre eigenen Zwecke entwickelt haben,
    möchten Sie diese vielleicht auf PECL zur Verfügung stellen, damit auch
    andere davon profitieren können. Ein netter Nebeneffekt ist, dass Sie
    anderen auf diese Weise eine gute Möglichkeit bieten, Ihnen Feedback,
    (hoffentlich) Dank, Fehlerberichte und sogar Korrekturen/Patches zu geben.
    Bitte lesen Sie <link xlink:href="&url.pecl.submit;">PECL submit</link>,
    bevor Sie Ihre Erweiterung zum Hosting auf PECL einreichen.
   </para>
  </sect2>

  <sect2 xml:id="install.pecl.windows.which">
   <title>Welche Erweiterung soll ich herunterladen?</title>
   <para>
    <emphasis>Häufig gibt es mehrere Versionen von einer DLL:</emphasis>
    <itemizedlist>
     <listitem>
      <simpara>
       Verschiedene Versionsnummern (zumindest die ersten beiden Nummern
       sollten übereinstimmen)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Verschiedene Einstellungen für die Thread-Sicherheit
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Verschiedene Prozessorarchitekturen (x86, x64, ...)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Verschiedene Einstellungen für das Debugging
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>etc.</literal>
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    Beachten Sie, dass die Einstellungen der Erweiterung mit den Einstellungen
    des von Ihnen verwendeten PHP-Programms übereinstimmen sollten. Das
    folgende PHP-Skript zeigt Ihnen <emphasis>alle</emphasis>
    PHP-Einstellungen an:
   </para>
   <para>
    <example>
     <title>Aufruf der Funktion <function>phpinfo</function></title>
     <programlisting role="php">
<![CDATA[
<?php
phpinfo();
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Alternativ können Sie Folgendes über die Befehlszeile ausführen:
    <screen>
<![CDATA[
drive:\\path\to\php\executable\php.exe -i
]]>
    </screen>
   </para>
  </sect2>

  <sect2 xml:id="install.pecl.windows.loading">
   <title>Laden einer Erweiterung</title>
   <para>
    Die übliche Methode, eine PHP-Erweiterung zu laden, besteht darin, sie in
    die Konfigurationsdatei <filename>php.ini</filename> einzutragen. Bitte
    beachten Sie, dass bereits viele Erweiterungen in der
    <filename>php.ini</filename> enthalten sind und dass Sie nur das Semikolon
    entfernen müssen, um sie zu aktivieren.
   </para>
   <para>
    Beachten Sie auch, dass ab PHP-Version 7.2.0 anstelle des Dateinamens der
    Erweiterung auch deren Name verwendet werden kann. Da dies unabhängig vom
    Betriebssystem gilt und insbesondere für Neueinsteiger einfacher ist, ist
    dies die empfohlene Methode, um die zu ladenden Erweiterungen anzugeben.
    Dateinamen werden aus Gründen der Kompatibilität mit früheren Versionen
    weiterhin unterstützt.
   </para>
    <screen>
<![CDATA[
;extension=php_extname.dll
]]>
    </screen>
    <screen>
<![CDATA[
extension=php_extname.dll
]]>
    </screen>
    <screen>
<![CDATA[
; Ab PHP Version 7.2 vorzuziehen:
extension=extname
zend_extension=another_extension
]]>
    </screen>
   <para>
    Manche Webserver können allerdings etwas verwirrend sein, da sie nicht die
    <filename>php.ini</filename> aus der PHP-Distribution verwenden, sondern
    ihre eigene. Wo sich die tatsächlich verwendete
    <filename>php.ini</filename> befindet, können Sie herausfinden, indem Sie
    in <function>phpinfo</function> nach dem Pfad suchen:
   </para>
    <screen>
<![CDATA[
Configuration File (php.ini) Path  C:\WINDOWS
]]>
    </screen>
    <screen>
<![CDATA[
Loaded Configuration File   C:\Program Files\PHP\5.2\php.ini
]]>
    </screen>
   <para>
    Nachdem Sie eine Erweiterung aktiviert haben, speichern Sie die
    <filename>php.ini</filename>, starten den Webserver neu und überprüfen die
    <function>phpinfo</function> erneut. Die neue Erweiterung sollte nun ihren
    eigenen Abschnitt haben.
   </para>
  </sect2>

  <sect2 xml:id="install.pecl.windows.problemsolving">
   <title>Probleme beheben</title>
   <para>
    Wenn die Erweiterung nicht in <function>phpinfo</function> erscheint,
    sollten Sie Ihre Logs überprüfen, um herauszufinden, wo das Problem liegt.
   </para>
   <para>
    Wenn Sie PHP auf der Befehlszeile (CLI) verwenden, können Sie den Fehler
    beim Laden der Erweiterung direkt auf dem Bildschirm sehen.
   </para>
   <para>
    Wenn Sie PHP über einen Webserver verwenden, hängen Ort und Format der
    Logs von Ihrer Software ab. Da die Logs nichts mit PHP selbst zu tun
    haben, sollten Sie die entsprechende Dokumentation Ihres Webservers lesen,
    um sie zu finden.
   </para>
   <para>
    Die häufigsten Ursachen für Probleme sind die Speicherorte der DLL selbst
    und der DLLs, von denen sie abhängt, der Wert der Einstellung
    "<link linkend="ini.extension-dir">extension_dir</link>" in der
    <filename>php.ini</filename> und falsche Einstellungen beim Kompilieren.
   </para>
   <para>
    Wenn das Problem auf falsche Einstellungen beim Kompilieren zurückzuführen
    ist, haben Sie wahrscheinlich nicht die richtige DLL heruntergeladen.
    Versuchen Sie, die Erweiterung nochmal mit den richtigen Einstellungen
    herunterzuladen. Auch hier kann <function>phpinfo</function> eine große
    Hilfe sein.
   </para>
  </sect2>

 </sect1>

 <sect1 xml:id="install.pecl.pear">
  <title>Kompilieren dynamischer PECL-Erweiterungen mit dem Befehl pecl</title>
  <simpara>
   PECL bietet eine einfache Möglichkeit, dynamische PHP-Erweiterungen zu
   erstellen. Verwenden Sie dafür den folgenden
   <link xlink:href="&url.php.pear.cli;">PECL-Befehl</link>:
  </simpara>
  <para>
   <screen>
$ pecl install extname
   </screen>
  </para>
  <simpara>
   Mit diesem Befehl wird der Quellcode für <emphasis>extname</emphasis>
   heruntergeladen, kompiliert und <filename>extname.so</filename> ins
   Verzeichnis <link linkend="ini.extension-dir">extension_dir</link>
   installiert. <filename>extname.so</filename> kann dann über die &php.ini;
   geladen werden
  </simpara>
  <simpara>
   Standardmäßig werden durch den Befehl <literal>pecl</literal> keine Pakete
   installiert, die mit dem Status <literal>alpha</literal> oder
   <literal>beta</literal> gekennzeichnet sind. Wenn keine
   <literal>stable</literal>-Pakete verfügbar sind, können Sie mit dem
   folgenden Befehl ein <literal>beta</literal>-Paket installieren:
  </simpara>
  <para>
   <screen>
$ pecl install extname-beta
   </screen>
  </para>
  <para>
   Mit dieser Variante können Sie auch eine bestimmte Version installieren:
  </para>
  <para>
   <screen>
$ pecl install extname-0.1
   </screen>
  </para>
  <note>
   <para>
    Nachdem die Erweiterung in der &php.ini; aktiviert wurde, muss der
    Webserver neu gestartet werden, damit die Änderungen übernommen werden.
   </para>
  </note>
 </sect1>

 <sect1 xml:id="install.pecl.phpize">
  <title>Kompilieren dynamischer PECL-Erweiterungen mit phpize</title>
  <simpara>
   Manchmal ist es nicht möglich, das Installationsprogramm von
   <literal>pecl</literal> zu verwenden. Dies könnte daran liegen, dass Sie
   sich hinter einer Firewall befinden oder dass die zu installierende
   Erweiterung nicht als PECL-kompatibles Paket verfügbar ist, &zb; weil sie
   noch nicht auf Git veröffentlicht wurde. Wenn Sie eine solche Erweiterung
   erstellen müssen, können Sie dies mit einfacheren Build-Tools manuell
   erledigen.
  </simpara>
  <simpara>
   Mit dem Befehl <literal>phpize</literal> wird die Build-Umgebung für eine
   PHP-Erweiterung vorbereitet. Im folgenden Beispiel befinden sich die
   Quellen für eine Erweiterung in einem Verzeichnis namens
   <filename>extname</filename>:
  </simpara>
  <para>
   <screen>
<![CDATA[
$ cd extname
$ phpize
$ ./configure
$ make
# make install
]]>
   </screen>
  </para>
  <simpara>
   Wenn alles gutgeht, wird <filename>extname.so</filename> erstellt und im
   <link linkend="ini.extension-dir">Verzeichnis für PHP-Erweiterungen</link>
   abgelegt. Bevor Sie die Erweiterung verwenden können, müssen Sie die Zeile
   <literal>extension=extname.so</literal> in die php.ini einfügen.
  </simpara>
  <simpara>
   Wenn es den Befehl <literal>phpize</literal> auf Ihrem System nicht gibt
   und Sie vorkompilierte Pakete (&zb; RPMs) verwenden, sollten Sie unbedingt
   auch die entsprechende Entwicklerversion des PHP-Pakets installieren, da
   dieses oft den Befehl <literal>phpize</literal> sowie die entsprechenden
   Header zum Erstellen von PHP und seinen Erweiterungen enthält.
  </simpara>
  <simpara>
   Mit dem Befehl <command>phpize --help</command> können Sie sich zusätzliche
   Informationen zur Verwendung anzeigen lassen.
  </simpara>
 </sect1>

 <sect1 xml:id="install.pecl.php-config">
  <title>php-config</title>

  <para>
   php-config ist ein einfaches Shell-Skript, das Informationen über die
   Konfiguration des installierten PHP-Systems liefert.
  </para>

  <para>
   Wenn Sie mehrere PHP-Versionen installiert haben, können Sie beim
   Kompilieren der Erweiterungen angeben, für welche Version Sie diese
   erstellen möchten, indem Sie während der Konfiguration die Option
   <literal>--with-php-config</literal> verwenden und den Pfad des jeweiligen
   php-config-Skripts angeben.
  </para>

  <para>
   Die Liste der Kommandozeilenoptionen, die das Skript php-config zur
   Verfügung stellt, lässt sich jederzeit abfragen, indem man php-config mit
   der Option <option>-h</option> ausführt:
   <screen>
<![CDATA[
Usage: /usr/local/bin/php-config [OPTION]
Options:
  --prefix            [...]
  --includes          [...]
  --ldflags           [...]
  --libs              [...]
  --extension-dir     [...]
  --include-dir       [...]
  --php-binary        [...]
  --php-sapis         [...]
  --configure-options [...]
  --version           [...]
  --vernum            [...]
]]>
   </screen>
  </para>

  <para>
   <table>
    <title>Befehlszeilenoptionen</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Option</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>--prefix</entry>
       <entry>Präfix des Verzeichnisses, in dem PHP installiert ist, &zb; /usr/local</entry>
      </row>
      <row>
       <entry>--includes</entry>
       <entry>Liste der -I-Optionen mit allen Include-Dateien</entry>
      </row>
      <row>
       <entry>--ldflags</entry>
       <entry>LD-Flags, mit denen PHP kompiliert wurde</entry>
      </row>
      <row>
       <entry>--libs</entry>
       <entry>Zusätzliche Bibliotheken, mit denen PHP kompiliert wurde</entry>
      </row>
      <row>
       <entry>--extension-dir</entry>
       <entry>Verzeichnis, in dem standardmäßig nach Erweiterungen gesucht wird</entry>
      </row>
      <row>
       <entry>--include-dir</entry>
       <entry>Präfix des Verzeichnisses, in das Header-Dateien standardmäßig installiert werden</entry>
      </row>
      <row>
       <entry>--php-binary</entry>
       <entry>Vollständiger Pfad zum PHP-CLI- oder -CGI-Binary</entry>
      </row>
      <row>
       <entry>--php-sapis</entry>
       <entry>Alle verfügbaren SAPI-Module</entry>
      </row>
      <row>
       <entry>--configure-options</entry>
       <entry>Konfigurationsoptionen zur Wiederherstellung der aktuellen PHP-Installationseinstellungen</entry>
      </row>
      <row>
       <entry>--version</entry>
       <entry>PHP-Version</entry>
      </row>
      <row>
       <entry>--vernum</entry>
       <entry>PHP-Version als Ganzzahl</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </sect1>

 <sect1 xml:id="install.pecl.static">
  <title>PECL-Erweiterungen statisch in PHP kompilieren</title>
  <simpara>
   In manchen Fällen müssen Sie vielleicht eine PECL-Erweiterung statisch in
   Ihr PHP-Binary kompilieren. Dazu müssen Sie den Quellcode der Erweiterung
   in das Verzeichnis <filename>/your/phpsrcdir/ext/</filename> einfügen und
   das PHP-Build-System anweisen, sein configure-Skript neu zu generieren.
  </simpara>
  <para>
   <screen>
<![CDATA[
$ cd /your/phpsrcdir/ext
$ pecl download extname
$ gzip -d < extname.tgz | tar -xvf -
$ mv extname-x.x.x extname
]]>
   </screen>
  </para>
  <simpara>
   Dadurch wird das folgende Verzeichnis erstellt:
  </simpara>
  <para>
   <screen>
    /your/phpsrcdir/ext/extname
   </screen>
  </para>
  <simpara>
   An dieser Stelle veranlassen Sie PHP, das configure-Skript neu zu
   erstellen, und bauen PHP anschließend wie gewohnt:
  </simpara>
  <para>
   <screen>
$ cd /your/phpsrcdir
$ rm configure
$ ./buildconf --force
$ ./configure --help
$ ./configure --with-extname --enable-someotherext --with-foobar
$ make
$ make install
   </screen>
  </para>
  <note>
   <simpara>
    Um das Skript "buildconf" auszuführen, benötigen Sie autoconf 2.13 und
    automake 1.4+ (neuere Versionen von autoconf könnten funktionieren, werden
    aber nicht unterstützt).
   </simpara>
  </note>
  <simpara>
   Ob <literal>--enable-extname</literal> oder
   <literal>--with-extname</literal> verwendet wird, hängt von der Erweiterung
   ab. Bei einer Erweiterung, die keine externen Bibliotheken benötigt, wird
   in der Regel <literal>--enable</literal> verwendet. Um sicher zu sein,
   können Sie nach buildconf folgenden Befehl ausführen:
  </simpara>
  <para>
   <screen>
$ ./configure --help | grep extname
   </screen>
  </para>
 </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
