<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 285e7e31e523ac35abc12bb1d7d60c8a6e42c4c6 Maintainer: samesch Status: ready -->

<sect2 xml:id="migration70.incompatible.foreach">
 <title>Änderungen bei &foreach;</title>

 <para>
  Am Verhalten der Kontrollstruktur &foreach; wurden kleinere Änderungen
  vorgenommen, die sich vor allem auf die Handhabung des internen
  Array-Zeigers und auf die Änderung des Arrays, über das iteriert wird,
  beziehen.
 </para>

 <sect3 xml:id="migration70.incompatible.foreach.array-pointer">
  <title>&foreach; ändert den internen Array-Zeiger nicht mehr</title>

  <para>
   Vor PHP 7 wurde der interne Array-Zeiger verändert, während mit &foreach;
   über ein Array iteriert wurde. Dies ist nun, wie im folgenden Beispiel
   gezeigt wird, nicht mehr der Fall:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0, 1, 2];
foreach ($array as &$val) {
    var_dump(current($array));
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(1)
int(2)
bool(false)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(0)
int(0)
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.by-value">
  <title>&foreach; iteriert bei Übergabe per Wert über eine Kopie des Arrays</title>

  <para>
   Wenn &foreach; im Standardmodus Pass-by-Value verwendet wird, arbeitet es
   nun mit einer Kopie des Arrays, über das iteriert wird, und nicht mit dem
   Array selbst. Das bedeutet, dass Änderungen, die während des Iterierens am
   Array vorgenommen werden, keine Auswirkungen auf die iterierten Werte haben.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.by-ref">
  <title>Verbessertes Iterationsverhalten von &foreach; bei Übergabe per Referenz</title>

  <para>
   Bei der Iteration per Referenz kann &foreach; Änderungen, die während des
   Iterierens am Array vorgenommen werden, nun besser verfolgen. Wenn zum
   Beispiel während des Iterierens etwas an das Array angehängt wird, führt
   das dazu, dass nun auch über die angehängten Werte iteriert wird:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0];
foreach ($array as &$val) {
    var_dump($val);
    $array[1] = 1;
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(0)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(1)
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.object">
  <title>Iteration über nicht-<classname>Traversable</classname> Objekte</title>

  <para>
   Die Iteration über Objekte, die <classname>Traversable</classname> nicht
   implementieren, verhält sich nun genauso wie die Iteration über Arrays per
   Referenz. Dies führt dazu, dass das
   <link linkend="migration70.incompatible.foreach.by-ref">verbesserte Verhalten, wenn sich ein Array während des Iterierens ändert</link>
   auch angewendet wird, wenn Eigenschaften zum Objekt hinzugefügt oder daraus
   entfernt werden.
  </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
