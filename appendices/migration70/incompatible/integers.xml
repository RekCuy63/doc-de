<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: samesch Status: ready -->

<sect2 xml:id="migration70.incompatible.integers">
 <title>Änderungen im Umgang mit dem Typ <type>int</type></title>

 <sect3 xml:id="migration70.incompatible.integers.invalid-octals">
  <title>Ungültige oktale Literale</title>

  <para>
   Bisher wurden oktale Literale, die ungültige Zahlen enthielten,
   stillschweigend abgeschnitten (<literal>0128</literal> wurde als
   <literal>012</literal> interpretiert). Nun verursacht ein ungültiges
   Oktal-Literal einen Parser-Fehler.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.negative-bitshift">
  <title>Negative Bitverschiebungen</title>

  <para>
   Bitweises Verschieben um negative Zahlen führt nun zu einem
   <classname>ArithmeticError</classname>:
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(1 >> -1);
?>
]]>
   </programlisting>
    &example.outputs.5;
    <screen>
<![CDATA[
int(0)
]]>
    </screen>
    &example.outputs.7;
    <screen>
<![CDATA[
Fatal error: Uncaught ArithmeticError: Bit shift by negative number in /tmp/test.php:2
Stack trace:
#0 {main}
  thrown in /tmp/test.php on line 2
]]>
    </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.out-of-range">
  <title>Bitverschiebungen außerhalb des zulässigen Bereichs</title>

  <para>
   Bitweise Verschiebungen (in beide Richtungen) über die Bitbreite eines
   <type>int</type> ergeben immer 0. Bisher war das Verhalten solcher
   Verschiebungen von der Architektur abhängig.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.div-by-zero">
  <title>Änderungen bei der Division durch Null</title>

  <para>
   Wenn 0 beim Divisionsoperator (/) oder beim Modulusoperator (%) als Divisor
   verwendet wird, wurde bisher einen Fehler der Stufe E_WARNING ausgegeben
   und <constant>false</constant> zurückgegeben. Nun gibt der
   Divisionsoperator, wie in IEEE 754 festgelegt, eine Gleitkommazahl entweder
   als +INF, -INF oder NAN zurück. Der Modulusoperator gibt nun kein E_WARNING
   mehr aus, sondern löst stattdessen eine
   <classname>DivisionByZeroError</classname>-Exception aus.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(3/0);
var_dump(0/0);
var_dump(0%0);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
Warning: Division by zero in %s on line %d
bool(false)

Warning: Division by zero in %s on line %d
bool(false)

Warning: Division by zero in %s on line %d
bool(false)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Warning: Division by zero in %s on line %d
float(INF)

Warning: Division by zero in %s on line %d
float(NAN)

PHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in %s line %d
]]>
   </screen>
  </informalexample>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
