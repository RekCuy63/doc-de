<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 35511ebc54edd56f1653a6a956210b4728570316 Maintainer: samesch Status: ready -->

<sect2 xml:id="migration70.incompatible.variable-handling">
 <title>Änderungen beim Umgang mit Variablen</title>

 <para>
  PHP 7 verwendet nun beim Parsen von Quelldateien einen abstrakten
  Syntaxbaum. Dies hat viele Verbesserungen an der Sprache ermöglicht, die
  zuvor aufgrund der Einschränkungen des Parsers in früheren PHP-Versionen
  nicht möglich waren. Allerdings hat das auch dazu geführt, dass einige
  Spezialfälle aus Gründen der Konsistenz entfernt wurden, was Brüche in der
  Abwärtskompatibilität zur Folge hat. Diese Fälle werden in diesem Abschnitt
  detailliert beschrieben.
 </para>

 <sect3 xml:id="migration70.incompatible.variable-handling.indirect">
  <title>Änderungen beim Umgang mit indirekten Variablen, Eigenschaften und Methoden</title>

  <para>
   Der indirekte Zugriff auf Variablen, Eigenschaften und Methoden wird nun
   in strikter Reihenfolge von links nach rechts ausgewertet. In früheren
   Versionen war die Reihenfolge der Auswertung in einigen Fällen umgekehrt.
   Die folgende Tabelle zeigt, wie sich die Reihenfolge der Auswertung
   geändert hat.
  </para>

  <para>
   <table>
    <title>Alte und neue Auswertung indirekter Ausdrücke</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Ausdruck</entry>
       <entry>Auswertung in PHP 5</entry>
       <entry>Auswertung in PHP 7</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <code>$$foo['bar']['baz']</code>
       </entry>
       <entry>
        <code>${$foo['bar']['baz']}</code>
       </entry>
       <entry>
        <code>($$foo)['bar']['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']()</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']()</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>Foo::$bar['baz']()</code>
       </entry>
       <entry>
        <code>Foo::{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>(Foo::$bar)['baz']()</code>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <para>
   Code, der die alte Auswertungsreihenfolge von rechts nach links verwendet,
   muss mit geschweiften Klammern umgeschrieben werden, um explizit diese
   Auswertungsreihenfolge zu verwenden (siehe die obige mittlere Spalte).
   Dadurch wird der Code sowohl vorwärtskompatibel mit PHP 7.x als auch
   rückwärtskompatibel mit PHP 5.x.
  </para>

  <para>
   Dies betrifft auch das Schlüsselwort &global;. Falls erforderlich, kann die
   Syntax mit den geschweiften Klammern verwendet werden, um das frühere
   Verhalten zu emulieren:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function f() {
    // Nur in PHP 5 gültig.
    global $$foo->bar;

    // In PHP 5 und 7 gültig.
    global ${$foo->bar};
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.list">
  <title>Änderungen im Umgang mit der Funktion <function>list</function></title>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.order">
   <title>
    <function>list</function> weist Variablen nicht mehr in umgekehrter
    Reihenfolge zu
   </title>

   <para>
    <function>list</function> weist den Variablen nun Werte in der Reihenfolge
    zu, in der sie definiert sind, und nicht mehr in umgekehrter Reihenfolge.
    Wie unten gezeigt, betrifft dies im Allgemeinen nur Fälle, in denen
    <function>list</function> in Verbindung mit dem Array-Operator
    <code>[]</code> verwendet wird:
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list($a[], $a[], $a[]) = [1, 2, 3];
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs.5;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(3)
  [1]=>
  int(2)
  [2]=>
  int(1)
}
]]>
    </screen>
    &example.outputs.7;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </informalexample>

   <para>
    Im Allgemeinen ist es nicht empfehlenswert, sich auf die Reihenfolge zu
    verlassen, in der die Zuweisungen mit <function>list</function> erfolgen.
    Das ist ein Implementierungs-Detail, das sich in der Zukunft wieder ändern
    kann.
   </para>
  </sect4>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.empty">
   <title>Leere <function>list</function>-Zuweisungen wurden entfernt</title>

   <para>
    <function>list</function>-Konstrukte dürfen nicht mehr leer sein; die
    Folgenden sind nicht mehr erlaubt:
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list() = $a;
list(,,) = $a;
list($x, list(), $y) = $a;
?>
]]>
    </programlisting>
   </informalexample>
  </sect4>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.string">
   <title><function>list</function> kann keine <type>String</type>s entpacken</title>

   <para>
    <function>list</function> kann Variablen vom Typ <type>string</type> nicht
    mehr entpacken. Stattdessen sollte <function>str_split</function>
    verwendet werden.
   </para>
  </sect4>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.array-order">
  <title>
   Änderung der Reihenfolge von Array-Elementen, die automatisch durch
   Zuweisung per Referenz erzeugt werden
  </title>

  <para>
   Die Reihenfolge der Elemente eines Arrays, die automatisch durch Zuweisung
   per Referenz erstellt werden, hat sich geändert. Zum Beispiel:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
array(2) {
  ["b"]=>
  &int(1)
  ["a"]=>
  &int(1)
}
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
array(2) {
  ["a"]=>
  &int(1)
  ["b"]=>
  &int(1)
}
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.parentheses">
  <title>Klammern um Funktionsparameter haben keinen Einfluss mehr auf das Verhalten</title>

  <para>
   Wenn in PHP 5 redundante Klammern um Funktionsparameter verwendet wurden,
   konnte die Warnung wegen strikter Standards unterdrückt werden, indem der
   Parameter per Referenz übergeben wurde. Nun wird die Warnung immer
   angezeigt.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function getArray() {
    return [1, 2, 3];
}

function squareArray(array &$a) {
    foreach ($a as &$v) {
        $v **= 2;
    }
}

// Erzeugt in PHP 7 eine Warnung.
squareArray((getArray()));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Notice: Only variables should be passed by reference in /tmp/test.php on line 13
]]>
   </screen>
  </informalexample>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
