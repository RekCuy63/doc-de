<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 497c40ac164d5873fd87f622dfdeb5206392b446 Maintainer: samesch Status: ready -->

<sect1 xml:id="migration80.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Neue Features</title>

 <sect2 xml:id="migration80.new-features.core">
  <title>PHP-Kern</title>

  <sect3 xml:id="migration80.new-features.core.named-arguments">
   <title>Benannte Parameter</title>

   <para>
    <!-- RFC: https://wiki.php.net/rfc/named_params -->
    Die Unterstützung für
    <link linkend="functions.named-arguments">benannte Parameter</link> wurde
    hinzugefügt.
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.attributes">
   <title>Attribute</title>

   <para>
    Die Unterstützung für
    <link linkend="language.attributes">Attribute</link> wurde
    hinzugefügt.
    <!-- RFC: https://wiki.php.net/rfc/attributes_v2 -->
    <!-- RFC: https://wiki.php.net/rfc/attribute_amendments -->
    <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax -->
    <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.property-promotion">
   <title>Beförderung von Konstruktoreigenschaften</title>

   <para>
    Die Unterstützung für die
    <link linkend="language.oop5.decon.constructor.promotion">Beförderung von Konstruktoreigenschaften</link>
    (Deklaration von Eigenschaften in der Konstruktorsignatur) wurde
    hinzugefügt.
    <!-- RFC: https://wiki.php.net/rfc/constructor_promotion -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.union-types">
   <title>Zusammengefasste Typen (Union-Typen)</title>

   <para>
    Die Unterstützung für
    <link linkend="language.types.declarations.composite.union">zusammengefasste Typen</link>
    wurde hinzugefügt.
    <!-- RFC: https://wiki.php.net/rfc/union_types_v2 -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.match">
   <title>Ausdruck match</title>

   <para>
    Die Unterstützung für den
    <link linkend="control-structures.match">Ausdruck <literal>match</literal></link>
    wurde hinzugefügt.
    <!-- RFC: https://wiki.php.net/rfc/match_expression_v2 -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.nullsafe-operator">
   <title>Nullsafe-Operator</title>

   <para>
    Die Unterstützung für den
    <link linkend="language.oop5.basic.nullsafe">nullsafe-Operator</link>
    (<literal>?-></literal>) wurde hinzugefügt.
    <!-- RFC: https://wiki.php.net/rfc/nullsafe_operator -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.new-features.core.others">
   <title>Andere neue Features</title>

   <itemizedlist>
    <listitem>
     <para>
      Die Klasse <link linkend="class.weakmap">WeakMap</link> wurde
      hinzugefügt.
      <!-- RFC: https://wiki.php.net/rfc/weak_maps -->
     </para>
    </listitem>
    <listitem>
     <para>
      Die Klasse <classname>ValueError</classname> wurde hinzugefügt.
     </para>
    </listitem>
    <listitem>
     <para>
      Eine beliebige Anzahl von Funktionsparametern kann nun durch einen
      variadischen Parameter ersetzt werden, solange die Typen kompatibel
      sind. Zum Beispiel ist der folgende Code nun erlaubt:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class A {
     public function method(int $many, string $parameters, $here) {}
}
class B extends A {
     public function method(...$everything) {}
}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      <type>static</type> (wie in "late static binding", späte statische
      Bindung) kann nun als Rückgabetyp verwendet werden:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class Test {
     public function create(): static {
          return new static();
     }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/static_return_type -->
     </para>
    </listitem>
    <listitem>
     <para>
      Es ist nun möglich, den Klassennamen eines Objekts mit Hilfe von
      <code>$object::class</code> zu ermitteln. Das Ergebnis ist dasselbe wie
      bei <code>get_class($object)</code>.
      <!-- RFC: https://wiki.php.net/rfc/class_name_literal_on_object -->
     </para>
    </listitem>
    <listitem>
     <para>
      &new; und &instanceof; können nun durch Verwendung von
      <code>new (Ausdruck)(...$args)</code> und
      <code>$obj instanceof (Ausdruck)</code> mit beliebigen Ausdrücken
      verwendet werden.
      <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
     </para>
    </listitem>
    <listitem>
     <para>
      Es wurden einige Verbesserungen an der Einheitlichkeit der
      Variablensyntax vorgenommen, zum Beispiel ist Folgendes nun erlaubt:
      <code>Foo::BAR::$baz</code>.
      <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
     </para>
    </listitem>
    <listitem>
     <para>
      Die Schnittstelle <interfacename>Stringable</interfacename> wurde
      hinzugefügt. Sie wird automatisch implementiert, wenn eine Klasse eine
      <link linkend="object.tostring">__toString()</link>-Methode definiert.
      <!-- RFC: https://wiki.php.net/rfc/stringable -->
     </para>
    </listitem>
    <listitem>
     <para>
      Traits können nun abstrakte private Methoden definieren. Diese Methoden
      müssen von der Klasse implementiert werden, die den Trait verwendet.
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>throw</literal> kann nun als Ausdruck verwendet werden. Das
      ermöglicht Verwendungen wie:
      <programlisting role="php">
<![CDATA[
<?php
$fn = fn() => throw new Exception('Exception in der Pfeilfunktion');
$user = $session->user ?? throw new Exception('Muss einen Benutzer haben');
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/throw_expression -->
     </para>
    </listitem>
    <listitem>
     <para>
      In Parameterlisten ist nun ein optionales Komma am Ende erlaubt.
      <programlisting role="php">
<![CDATA[
<?php
function functionWithLongSignature(
    Type1 $parameter1,
    Type2 $parameter2, // <-- Dieses Komma ist nun erlaubt.
) {
}
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/trailing_comma_in_parameter_list -->
     </para>
    </listitem>
    <listitem>
     <para>
      Es ist nun möglich, <code>catch (Exception)</code> zu schreiben, um eine
      Ausnahme abzufangen, ohne sie in einer Variablen zu speichern.
      <!-- RFC: https://wiki.php.net/rfc/non-capturing_catches -->
     </para>
    </listitem>
    <listitem>
     <para>
      Die Unterstützung für den Typ <type>mixed</type> wurde hinzugefügt.
      <!-- RFC: https://wiki.php.net/rfc/mixed_type_v2 -->
     </para>
    </listitem>
    <listitem>
     <para>
      Private Methoden, die in einer übergeordneten Klasse deklariert wurden,
      erzwingen für die Methoden einer Kindklasse keine Vererbungsregeln mehr
      (mit Ausnahme von finalen privaten Konstruktoren). Das folgende Beispiel
      veranschaulicht, welche Einschränkungen aufgehoben wurden:
      <programlisting role="php">
<![CDATA[
<?php
class ParentClass {
    private function method1() {}
    private function method2() {}
    private static function method3() {}
    // Löst eine Warnung aus, da "final" keine Bedeutung mehr hat:
    private final function method4() {}
}
class ChildClass extends ParentClass {
    // Alles Folgende ist nun erlaubt, auch wenn die Modifikatoren nicht
    // dieselben sind wie bei den privaten Methoden in der Elternklasse.
    public abstract function method1() {}
    public static function method2() {}
    public function method3() {}
    public function method4() {}
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      Die Funktion <function>get_resource_id</function> wurde hinzugefügt. Sie
      gibt denselben Wert zurück wie <code>(int) $resource</code> und bietet
      dieselbe Funktionalität mit einer übersichtlicheren API.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Klasse <classname>InternalIterator</classname> wurde hinzugefügt.
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.new-features.date">
  <title>Datum und Uhrzeit</title>

  <itemizedlist>
   <listitem>
    <para>
     Die Methoden <methodname>DateTime::createFromInterface</methodname> und
     <methodname>DateTimeImmutable::createFromInterface</methodname> wurden
     hinzugefügt.
    </para>
   </listitem>
   <listitem>
    <para>
     Für DateTime wurde die Formatangabe <literal>p</literal> hinzugefügt, die
     ähnlich ist wie <literal>P</literal>, aber für UTC <literal>Z</literal>
     anstelle von <literal>+00:00</literal> zurückgibt.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.dom">
  <title>DOM</title>

  <para>
   Die Schnittstellen <interfacename>DOMParentNode</interfacename> und
   <interfacename>DOMChildNode</interfacename> mit neuen Traversal- und
   Kontroll-APIs wurden hinzugefügt.
   <!-- RFC: https://wiki.php.net/rfc/dom_living_standard_api-->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.filter">
  <title>Filter</title>

  <para>
   <constant>FILTER_VALIDATE_BOOL</constant> wurde als Alias für
   <constant>FILTER_VALIDATE_BOOLEAN</constant> hinzugefügt. Der neue Name
   sollte bevorzugt werden, weil er den kanonischen Typnamen verwendet.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.enchant">
  <title>Enchant</title>

  <para>
   Die Funktionen <function>enchant_dict_add</function>,
   <function>enchant_dict_is_added</function> und die Konstante
   <constant>LIBENCHANT_VERSION</constant> wurden hinzugefügt.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.fpm">
  <title>FPM</title>

  <para>
   Die neue Option <literal>pm.status_listen</literal> wurde hinzugefügt. Sie
   ermöglicht es, den Status von einem anderen Endpunkt zu erhalten (&zb; Port
   oder UDS-Datei). Dies ist nützlich, um den Status zu erhalten, wenn alle
   Kindprozesse mit der Bearbeitung lang laufender Anfragen beschäftigt sind.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.hash">
  <title>Hash</title>

  <para>
   <classname>HashContext</classname>-Objekte können nun serialisiert werden.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.intl">
  <title>Funktionen für die Internationalisierung</title>

  <para>
   Die Konstanten <constant>IntlDateFormatter::RELATIVE_FULL</constant>,
   <constant>IntlDateFormatter::RELATIVE_LONG</constant>,
   <constant>IntlDateFormatter::RELATIVE_MEDIUM</constant> und
   <constant>IntlDateFormatter::RELATIVE_SHORT</constant> wurden hinzugefügt.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.ldap">
  <title>LDAP</title>

  <para>
   Die Funktion <function>ldap_count_references</function> wurde hinzugefügt;
   sie gibt die Anzahl der Referenzmeldungen in einem Suchergebnis zurück.

  </para>
 </sect2>
 <sect2 xml:id="migration80.new-features.opcache">
  <title>OPcache</title>

  <para>
   Wenn die ini-Einstellung
   <!--<link linkend="ini.opcache.record-warnings">-->opcache.record_warnings<!--</link>-->
   aktiviert ist, zeichnet OPcache die Warnungen auf, die bei der Kompilierung
   auftreten, und gibt sie beim nächsten Include wieder, auch wenn sie aus dem
   Cache geliefert werden.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.openssl">
  <title>OpenSSL</title>

  <para>
   Die Unterstützung für die Cryptographic Message Syntax (CMS)
   (<link xlink:href="&url.rfc;5652">RFC 5652</link>), die aus Funktionen zum
   Verschlüsseln, Entschlüsseln, Signieren, Überprüfen und Lesen besteht,
   wurde hinzugefügt. Die API ist der API für
   <acronym>PKCS</acronym>-#7-Funktionen ähnlich und enthält darüber hinaus
   folgende neue Verschlüsselungskonstanten:
   <constant>OPENSSL_ENCODING_DER</constant>,
   <constant>OPENSSL_ENCODING_SMIME</constant> und
   <constant>OPENSSL_ENCODING_PEM</constant>:
   <simplelist>
    <member>
     <function>openssl_cms_encrypt</function> verschlüsselt die Nachricht in
     der Datei mit den Zertifikaten und gibt das Ergebnis in der angegebenen
     Datei aus.
    </member>
    <member>
     <function>openssl_cms_decrypt</function> entschlüsselt die
     S/MIME-Nachricht in der Datei und gibt das Ergebnis in der angegebenen
     Datei aus.
    </member>
    <member>
     <function>openssl_cms_read</function> exportiert die CMS-Datei in ein
     Array von <acronym>PEM</acronym>-Zertifikaten.
    </member>
    <member>
     <function>openssl_cms_sign</function> signiert die MIME-Nachricht in der
     Datei mit einem Zertifikat und einem Schlüssel und gibt das Ergebnis in
     der angegebenen Datei aus.
    </member>
    <member>
     <function>openssl_cms_verify</function> verifiziert, dass der Datenblock
     intakt ist, der Unterzeichner der ist, für den er sich ausgibt, und gibt
     die Zertifikate der Unterzeichner zurück.
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.pcre">
  <title>Reguläre Ausdrücke (Perl-kompatibel)</title>

  <para>
   Die Funktion <function>preg_last_error_msg</function> wurde hinzugefügt.
   Sie gibt eine menschenlesbare Meldung für den letzten PCRE-Fehler zurück
   und ergänzt die Funktion <function>preg_last_error</function>, die einen
   Integer-Enum-Wert zurückgibt.
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.reflection">
  <title>Reflection</title>

  <itemizedlist>
   <listitem>
    <para>
     Die folgenden Methoden können nun Informationen über die Standardwerte
     der Parameter interner Funktionen zurückgeben:
    </para>
    <para>
     <simplelist>
      <member><methodname>ReflectionParameter::isDefaultValueAvailable</methodname></member>
      <member><methodname>ReflectionParameter::getDefaultValue</methodname></member>
      <member><methodname>ReflectionParameter::isDefaultValueConstant</methodname></member>
      <member><methodname>ReflectionParameter::getDefaultValueConstantName</methodname></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   Die Methode <methodname>SQLite3::setAuthorizer</methodname> und
   entsprechende Klassenkonstanten wurden hinzugefügt. Damit ist es möglich,
   eine benutzerdefinierte Callback-Funktion anzugeben, die verwendet wird, um
   eine Aktion in der Datenbank zu autorisieren oder nicht.
   <!-- PR: https://github.com/php/php-src/pull/4797 -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.standard">
  <title>Standard-Funktionsbibliothek</title>

  <itemizedlist>
   <listitem>
    <para>
     Die Funktionen <function>str_contains</function>,
     <function>str_starts_with</function> und
     <function>str_ends_with</function> wurden hinzugefügt. Sie prüfen, ob
     <parameter>haystack</parameter> <parameter>needle</parameter> enthält
     bzw. damit beginnt oder endet.
     <!-- RFC: https://wiki.php.net/rfc/str_contains -->
     <!-- RFC: https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions -->
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>fdiv</function> wurde hinzugefügt. Sie führt eine
     Gleitkomma-Division nach IEEE 754-Semantik durch. Die Division durch Null
     wird als wohldefiniert betrachtet und gibt einen der Werte
     <literal>Inf</literal>, <literal>-Inf</literal> oder
     <literal>NaN</literal> zurück.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>get_debug_type</function> wurde hinzugefügt. Sie
     gibt einen Typ zurück, der für Fehlermeldungen nützlich ist. Anders als
     <function>gettype</function> verwendet sie kanonische Typnamen, gibt
     die Klassennamen von Objekten zurück und nennt bei Ressourcen den
     Ressourcentyp.
     <!-- RFC: https://wiki.php.net/rfc/get_debug_type -->
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktionen <function>printf</function> und Freunde unterstützen nun
     die Formatangaben <literal>%h</literal> und <literal>%H</literal>. Diese
     sind vergleichbar mit <literal>%g</literal> und <literal>%G</literal>,
     verwenden aber immer <literal>"."</literal> als Dezimaltrennzeichen,
     anstatt es durch die <constant>LC_NUMERIC</constant>-Locale zu bestimmen.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktionen <function>printf</function> und Freunde unterstützen nun
     die Verwendung von <literal>"*"</literal> als Breite oder Genauigkeit. In
     diesem Fall wird die Breite/Genauigkeit als Parameter an printf
     übergeben. Außerdem ermöglicht dies bei <literal>%g</literal>,
     <literal>%G</literal>, <literal>%h</literal> und <literal>%H</literal>
     die Verwendung der Genauigkeit <literal>-1</literal>. Zum Beispiel kann
     der folgende Code verwendet werden, um die standardmäßige
     Gleitkomma-Formatierung von PHP zu reproduzieren:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
printf("%.*H", (int) ini_get("precision"), $float);
printf("%.*H", (int) ini_get("serialize_precision"), $float);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>proc_open</function> unterstützt nun
     Pseudo-Terminal (PTY)-Deskriptoren. Das folgende hängt
     <literal>stdin</literal>, <literal>stdout</literal> und
     <literal>stderr</literal> an dasselbe PTY an:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['pty'], ['pty'], ['pty']], $pipes);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     <function>proc_open</function> unterstützt nun Socket-Paar-Deskriptoren.
     Das folgende fügt ein bestimmtes Socket-Paar an <literal>stdin</literal>,
     <literal>stdout</literal> und <literal>stderr</literal> an:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$proc = proc_open($command, [['socket'], ['socket'], ['socket']], $pipes);
?>
]]>
     </programlisting>
    </para>
    <para>
     Im Gegensatz zu Pipes gibt es bei Sockets unter Windows keine Probleme
     mit blockierenden I/Os. Allerdings funktionieren nicht alle Programme
     korrekt mit stdio-Sockets.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Sortierfunktionen verwenden nun eine stabile Sortierung. Das
     bedeutet, dass Elemente, die verglichen und für gleich befunden werden,
     ihre ursprüngliche Reihenfolge beibehalten.
     <!-- RFC: https://wiki.php.net/rfc/stable_sorting -->
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktionen <function>array_diff</function>,
     <function>array_intersect</function> und ihre Variationen können nun mit
     einem einzigen Array als Parameter verwendet werden. Das bedeutet, dass
     Verwendungen wie die folgende nun möglich sind:
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
// OK, auch wenn $excludes leer ist:
array_diff($array, ...$excludes);
// OK, auch wenn $arrays nur ein einziges Array enthält:
array_intersect(...$arrays);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     Der Parameter <parameter>flag</parameter> der Funktion
     <function>ob_implicit_flush</function> akzeptiert nun ein
     <type>bool</type> anstelle eines <type>int</type>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.new-features.tokenizer">
  <title>Tokenizer</title>

  <para>
   Die Klasse <classname>PhpToken</classname> fügt dem Tokenizer eine
   objektbasierte Schnittstelle hinzu. Diese Klasse bietet eine einheitlichere
   und ergonomischere Darstellung ist zudem speichereffizienter und schneller.
   <!--  RFC: https://wiki.php.net/rfc/token_as_object -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.new-features.zip">
  <title>Zip</title>

  <itemizedlist>
   <listitem>
    <para>
     Die Erweiterung Zip wurde auf die Version 1.19.1 aktualisiert.
    </para>
   </listitem>
   <listitem>
    <para>
     Neue Methoden <methodname>ZipArchive::setMtimeName</methodname> und
     <methodname>ZipArchive::setMtimeIndex</methodname>, um die Änderungszeit
     eines Eintrags festzulegen.
    </para>
   </listitem>
   <listitem>
    <para>
     Neue Methode
     <methodname>ZipArchive::registerProgressCallback</methodname>, um
     Aktualisierungen beim Schließen eines Archivs bereitzustellen.
    </para>
   </listitem>
   <listitem>
    <para>
     Neue Methode <methodname>ZipArchive::registerCancelCallback</methodname>,
     um einen Abbruch während des Schließens eines Archivs zu ermöglichen.
    </para>
   </listitem>
   <listitem>
    <para>
     Neue Methode <methodname>ZipArchive::replaceFile</methodname>, um den
     Inhalt eines Eintrags zu ersetzen
    </para>
   </listitem>
   <listitem>
    <para>
     Neue Methode
     <methodname>ZipArchive::isCompressionMethodSupported</methodname>, um auf
     optionale Komprimierungsfunktionen zu prüfen.
    </para>
   </listitem>
   <listitem>
    <para>
     Neue Methode
     <methodname>ZipArchive::isEncryptionMethodSupported</methodname>, um auf
     optionale Verschlüsselungsfunktionen zu prüfen.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Eigenschaft <varname>ZipArchive::lastId</varname> wurde hinzugefügt,
     um den Indexwert des zuletzt eingefügten Eintrags zu erhalten.
    </para>
   </listitem>
   <listitem>
    <para>
     Mit den Eigenschaften <varname>ZipArchive::status</varname> und
     <varname>ZipArchive::statusSys</varname> oder der Methode
     <methodname>ZipArchive::getStatusString</methodname> können nun Fehler
     nach dem Schließen eines Archivs überprüft werden.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Option <literal>'remove_path'</literal> der Methoden
     <methodname>ZipArchive::addGlob</methodname> und
     <methodname>ZipArchive::addPattern</methodname> wird nun als beliebiges
     Zeichenketten-Präfix behandelt (um mit der Option
     <literal>'add_path'</literal> konsistent zu sein), während sie früher als
     Verzeichnisname behandelt wurde.
    </para>
   </listitem>
   <listitem>
    <para>
     Optionale Komprimierungs- und Verschlüsselungsfunktionen werden nun in
     phpinfo aufgelistet.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
