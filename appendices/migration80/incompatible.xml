<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: afbe8ad5ba46fb615d5723e25dfef4813279626f Maintainer: samesch Status: wip -->

<sect1 xml:id="migration80.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nicht abwärtskompatible Änderungen</title>

 <sect2 xml:id="migration80.incompatible.core">
  <title>PHP-Kern</title>

  <sect3 xml:id="migration80.incompatible.core.string-number-comparision">
   <title>Vergleich zwischen Zeichenketten und Zahlen</title>

   <para>
    Einfache (nicht-strikte) Vergleiche zwischen Zahlen und nicht-numerischen
    Zeichenketten erfolgen nun durch Umwandlung der Zahl in eine Zeichenkette
    und den Vergleich der Zeichenketten. Vergleiche zwischen Zahlen und
    numerischen Zeichenketten funktionieren weiterhin wie bisher. Insbesondere
    bedeutet dies, dass <code>0 == "keine Zahl"</code> nun als falsch
    angesehen wird.
    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Vergleich</entry>
        <entry>Vor der Änderung</entry>
        <entry>Nach der Änderung</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><code>0 == "0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "0.0"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>0 == "foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>0 == ""</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
       <row>
        <entry><code>42 == "   42"</code></entry>
        <entry>&true;</entry>
        <entry>&true;</entry>
       </row>
       <row>
        <entry><code>42 == "42foo"</code></entry>
        <entry>&true;</entry>
        <entry>&false;</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <!-- RFC: https://wiki.php.net/rfc/string_to_number_comparison -->
   </para>
  </sect3>

  <sect3 xml:id="migration80.incompatible.core.other">
   <title>Andere inkompatible Änderungen</title>

   <itemizedlist>
    <listitem>
     <para>
      <literal>match</literal> ist nun ein reserviertes Schlüsselwort.
     </para>
    </listitem>
    <listitem>
     <para>
      Assertion-Fehler werden nun standardmäßig ausgelöst. Wenn das alte
      Verhalten gewünscht wird, kann in den INI-Einstellungen
      <code>assert.exception=0</code> gesetzt werden.
     </para>
    </listitem>
    <listitem>
     <para>
      Methoden mit dem gleichen Namen wie die Klasse werden nicht mehr als
      Konstruktoren interpretiert. Stattdessen sollte die Methode
      <link linkend="object.construct">__construct()</link> verwendet werden.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Möglichkeit, nicht-statische Methoden statisch aufzurufen, wurde
      entfernt. Deshalb schlägt <function>is_callable</function> fehl, wenn
      eine nicht-statische Methode mit einem Klassennamen geprüft wird (muss
      mit einer Objektinstanz überprüft werden).
     </para>
    </listitem>
    <listitem>
     <para>
      Die Typumwandlungen <code>(real)</code> und <code>(unset)</code> wurden
      entfernt.
     </para>
    </listitem>
    <listitem>
     <para>
      Die ini-Direktive <link linkend="ini.track-errors">track_errors</link>
      wurde entfernt. Das bedeutet, dass <varname>php_errormsg</varname> nicht
      mehr verfügbar ist. Stattdessen kann die Funktion
      <function>error_get_last</function> verwendet werden.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Möglichkeit, Konstanten ohne Berücksichtigung der Groß- und
      Kleinschreibung zu definieren, wurde entfernt. Das dritte Argument von
      <function>define</function> kann nicht mehr &true; sein.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Möglichkeit, einen Autoloader mit einer
      <function>__autoload</function>-Funktion anzugeben, wurde entfernt.
      Stattdessen sollte <function>spl_autoload_register</function> verwendet
      werden.
     </para>
    </listitem>
    <listitem>
     <para>
      Der Parameter <parameter>errcontext</parameter> wird nicht mehr an
      benutzerdefinierte Fehlerbehandlungen übergeben, die mit der Funktion
      <function>set_error_handler</function> gesetzt wurden.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Funktion <function>create_function</function> wurde entfernt.
      Stattdessen können anonyme Funktionen verwendet werden.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Funktion <function>each</function> wurde entfernt. Stattdessen
      sollte &foreach; oder <classname>ArrayIterator</classname> verwendet
      werden.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Möglichkeit, die Bindung von <varname>this</varname> an Closures
      aufzuheben, die mittels <methodname>Closure::fromCallable</methodname>
      oder <methodname>ReflectionMethod::getClosure</methodname> aus einer
      Methode erzeugt wurden, wurde entfernt.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Möglichkeit, die Bindung von <varname>this</varname> an echte
      Closures aufzuheben, die <varname>this</varname> verwenden, wurde
      ebenfalls entfernt.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Möglichkeit, die Funktion <function>array_key_exists</function> mit
      Objekten zu verwenden, wurde entfernt. Stattdessen können
      <function>isset</function> oder <function>property_exists</function>
      verwendet werden.
     </para>
    </listitem>
    <listitem>
     <para>
      Das Verhalten der Funktion <function>array_key_exists</function>
      bezüglich des Typs des Parameters <parameter>key</parameter> entspricht
      nun dem Verhalten der Funktion <function>isset</function> und dem
      normalen Array-Zugriff. Alle Schlüsseltypen verwenden nun die üblichen
      Begrenzungen und Array- und Objektschlüssel lösen einen
      <classname>TypeError</classname> aus.
     </para>
    </listitem>
    <listitem>
     <para>
      Jedes Array, das eine Zahl <replaceable>n</replaceable> als ersten
      numerischen Schlüssel hat, verwendet <replaceable>n+1</replaceable> für
      seinen nächsten impliziten Schlüssel, auch wenn
      <replaceable>n</replaceable> negativ ist.
      <!-- RFC: https://wiki.php.net/rfc/negative_array_index -->
     </para>
    </listitem>
    <listitem>
     <para>
      Die voreingestellte Stufe von error_reporting ist nun
      <constant>E_ALL</constant>; zuvor waren <constant>E_NOTICE</constant>
      und <constant>E_DEPRECATED</constant> ausgeschlossen.
     </para>
    </listitem>
    <listitem>
     <para>
      <link linkend="ini.display-startup-errors">display_startup_errors</link>
      ist nun standardmäßig aktiviert.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Verwendung von <type>parent</type> innerhalb einer Klasse, die keine
      übergeordnete Klasse hat, führt nun bei der Kompilierung zu einem
      schweren Fehler.
     </para>
    </listitem>
    <listitem>
     <para>
      Der Operator <literal>@</literal> unterdrückt nun keine schweren Fehler
      (<constant>E_ERROR</constant>, <constant>E_CORE_ERROR</constant>,
      <constant>E_COMPILE_ERROR</constant>, <constant>E_USER_ERROR</constant>,
      <constant>E_RECOVERABLE_ERROR</constant> und
      <constant>E_PARSE</constant>) mehr. Error-Handler, die erwarten, dass
      error_reporting <literal>0</literal> ist, wenn <literal>@</literal>
      verwendet wird, sollten so angepasst werden, dass sie stattdessen die
      Fehler-Maske prüfen:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Dies ersetzen
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (error_reporting() == 0) {
        return false; // Stummgeschaltet
    }
    // ...
}

// mit Folgendem
function my_error_handler($err_no, $err_msg, $filename, $linenum) {
    if (!(error_reporting() & $err_no)) {
        return false; // Stummgeschaltet
    }
    // ...
}
?>
]]>
      </programlisting>
     </para>
     <para>
      Darüber hinaus sollte in Produktivumgebungen darauf geachtet werden,
      dass keine Fehlermeldungen angezeigt werden, da dies zu
      Informationslecks führen kann. Es sollte sichergestellt werden, dass in
      Verbindung mit der Fehleraufzeichnung <code>display_errors=Off</code>
      verwendet wird.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>#[</literal> wird nicht mehr als Beginn eines Kommentars
      interpretiert, weil diese Syntax nun für Attribute verwendet wird.
      <!-- RFC: https://wiki.php.net/rfc/shorter_attribute_syntax_change -->
     </para>
    </listitem>
    <listitem>
     <para>
      Vererbungsfehler aufgrund von inkompatiblen Methodensignaturen
      (Verletzung des Liskovschen Substitutionsprinzip, LSP) führen nun immer
      zu einem schweren Fehler. Vorher wurde in manchen Fällen eine Warnung
      erzeugt.
      <!-- RFC: https://wiki.php.net/rfc/lsp_errors -->
     </para>
    </listitem>
    <listitem>
     <para>
      Die Rangfolge des Verkettungsoperators hat sich gegenüber
      Bitverschiebungen und Addition sowie Subtraktion geändert.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
echo "Summe: " . $a + $b;
// wurde früher wie folgt interpretiert:
echo ("Summe: " . $a) + $b;
// wird nun interpretiert als:
echo "Summe: " . ($a + $b);
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/concatenation_precedence -->
     </para>
    </listitem>
    <listitem>
     <para>
      Ein Parameter mit einem Standardwert, der bei der Ausführung zu &null;
      aufgelöst wird, wird nicht mehr implizit als nullbarer Parameter
      gekennzeichnet. Stattdessen muss explizit entweder ein nullbarer Typ
      oder der Standardwert &null; verwendet werden.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Dies ersetzen
function test(int $arg = CONST_RESOLVING_TO_NULL) {}
// mit
function test(?int $arg = CONST_RESOLVING_TO_NULL) {}
// oder
function test(int $arg = null) {}
?>
]]>
      </programlisting>
     </para>
    </listitem>
    <listitem>
     <para>
      Einige Warnungen wurden in <classname>Error</classname>-Exceptions
      umgewandelt:
     </para>
     <para>
      <simplelist>
       <member>
        Der Versuch, in eine Eigenschaft eines Nicht-Objekts zu schreiben.
        Zuvor wurde dadurch implizit ein stdClass-Objekt für null, false und
        leere Zeichenketten erstellt.
       </member>
       <member>
        Der Versuch, ein Element an ein Array anzuhängen, für das bereits der
        Schlüssel PHP_INT_MAX verwendet wird.
       </member>
       <member>
        Der Versuch, einen ungültigen Typ (Array oder Objekt) als
        Array-Schlüssel oder Zeichenketten-Offset zu verwenden.
       </member>
       <member>
        Der Versuch, in einen Array-Index eines skalaren Wertes zu schreiben.
       </member>
       <member>Der Versuch, ein Nicht-Array/Traversable zu entpacken.</member>
       <member>
        Der Versuch, auf unqualifizierte Konstanten zuzugreifen, die nicht
        definiert sind. Zuvor führten Zugriffe auf unqualifizierte Konstanten
        zu einer Warnung und wurden als Zeichenketten interpretiert.
       </member>
      </simplelist>
     </para>
     <para>
      Einige Hinweise wurden in Warnungen umgewandelt:
     </para>
     <para>
      <simplelist>
       <member>Der Versuch, eine undefinierte Variable zu lesen.</member>
       <member>Der Versuch, eine undefinierte Eigenschaft zu lesen.</member>
       <member>Der Versuch, einen undefinierten Array-Schlüssel zu lesen.</member>
       <member>Der Versuch, eine Eigenschaft eines Nicht-Objekts zu lesen.</member>
       <member>
        Der Versuch, auf einen Array-Index eines Nicht-Arrays zuzugreifen.
       </member>
       <member>Der Versuch, ein Array in eine Zeichenkette zu konvertieren.</member>
       <member>Der Versuch, eine Ressource als Array-Schlüssel zu verwenden.</member>
       <member>
        Der Versuch, null, einen Boolean oder einen Float als
        Zeichenketten-Offset zu verwenden.
       </member>
       <member>
        Der Versuch, einen Zeichenketten-Offset zu lesen, der außerhalb des
        zulässigen Bereichs liegt.
       </member>
       <member>
        Der Versuch, einem Zeichenketten-Offset eine leere Zeichenkette
        zuzuweisen.
       </member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/engine_warnings -->
     </para>
    </listitem>
    <listitem>
     <para>
      Der Versuch, einem Zeichenketten-Offset mehrere Bytes zuzuweisen, führt
      nun zu einer Warnung.
     </para>
    </listitem>
    <listitem>
     <para>
      Unerwartete Zeichen in Quelldateien (z. B. NUL-Bytes außerhalb von
      Zeichenketten) führen nun statt zu einer Warnung beim Kompilieren zu 
      einer <classname>ParseError</classname>-Exception.
     </para>
    </listitem>
    <listitem>
     <para>
      Nicht abgefangene Exceptions durchlaufen nun einen "sauberen Shutdown",
      was bedeutet, dass nach einer nicht abgefangenen Exception die
      Destruktoren aufgerufen werden.
     </para>
    </listitem>
    <listitem>
     <para>
      Der bei der Kompilierung auftretende schwere Fehler "Only variables can
      be passed by reference" wurde auf die Laufzeit verschoben und in die
      <classname>Error</classname>-Exception "Argument cannot be passed by
      reference" umgewandelt.
     </para>
    </listitem>
    <listitem>
     <para>
      Einige "Only variables should be passed by reference"-Hinweise wurden
      in die Exception "Argument cannot be passed by reference" umgewandelt.
     </para>
    </listitem>
    <listitem>
     <para>
      Der für anonyme Klassen erzeugte Name hat sich geändert. Er enthält nun
      den Namen des ersten Elternteils oder der ersten Schnittstelle:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
new class extends ParentClass {};
// -> ParentClass@anonymous
new class implements FirstInterface, SecondInterface {};
// -> FirstInterface@anonymous
new class {};
// -> class@anonymous
?>
]]>
      </programlisting>
     </para>
     <para>
      Auf den oben gezeigten Namen folgen noch ein NUL-Byte und ein
      eindeutiges Suffix.
     </para>
    </listitem>
    <listitem>
     <para>
      Verweise auf nicht-absolute Trait-Methoden in Anpassungen von
      Trait-Aliasen müssen nun eindeutig sein:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
class X {
    use T1, T2 {
        func as otherFunc;
    }
    function func() {}
}
?>
]]>
      </programlisting>
     </para>
     <para>
      Wenn sowohl <code>T1::func()</code> als auch <code>T2::func()</code>
      existieren, wurde dieser Code bisher stillschweigend akzeptiert, und es
      wurde angenommen, dass func sich auf <code>T1::func</code> bezieht. Nun
      erzeugt er stattdessen einen schweren Fehler und es muss explizit
      entweder <code>T1::func</code> oder <code>T2::func</code> geschrieben
      werden.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Signatur von abstrakten Methoden, die in Traits definiert sind, wird
      nun anhand der Methode der implementierenden Klasse überprüft:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
trait MyTrait {
    abstract private function neededByTrait(): string;
}

class MyClass {
    use MyTrait;

    // Fehler, da der Rückgabetyp nicht übereinstimmt.
    private function neededByTrait(): int { return 42; }
}
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/abstract_trait_method_validation -->
     </para>
    </listitem>
    <listitem>
     <para>
      Deaktivierte Funktionen werden nun genauso behandelt wie nicht
      existierende Funktionen. Wenn eine deaktivierte Funktion aufgerufen
      wird, wird sie als unbekannt gemeldet und es ist nun möglich, eine
      deaktivierte Funktion neu zu definieren.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>data://</literal>-Stream-Wrapper sind nicht mehr beschreibbar,
      was dem dokumentierten Verhalten entspricht.
     </para>
    </listitem>
    <listitem>
     <para>
      Die arithmetischen und bitweisen Operatoren <literal>+</literal>,
      <literal>-</literal>, <literal>*</literal>, <literal>/</literal>,
      <literal>**</literal>, <literal>%</literal>,
      <literal>&lt;&lt;</literal>, <literal>&gt;&gt;</literal>,
      <literal>&amp;</literal>, <literal>|</literal>, <literal>^</literal>,
      <literal>~</literal>, <literal>++</literal> und <literal>--</literal>
      lösen nun ausnahmslos einen <classname>TypeError</classname> aus, wenn
      einer der der Operanden ein &array;, eine &resource; oder ein nicht
      überladenes &object; ist. Die einzige Ausnahme hiervon ist die
      Array-Zusammenführung Array <literal>+</literal> Array, die weiterhin
      unterstützt wird.
      <!-- RFC: https://wiki.php.net/rfc/arithmetic_operator_type_checks -->
     </para>
    </listitem>
    <listitem>
     <para>
      Die Umwandlung vom Typ Float in den Typ String erfolgt nun immer
      unabhängig von der Locale.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
setlocale(LC_ALL, "de_DE");
$f = 3.14;
echo $f, "\n";
// Vorher: 3,14
// Jetzt:  3.14
?>
]]>
      </programlisting>
     </para>
     <para>
      Siehe <function>printf</function>, <function>number_format</function>
      und <methodname>NumberFormatter</methodname> für Möglichkeiten, die
      Formatierung von Zahlen anzupassen.
      <!-- RFC: https://wiki.php.net/rfc/locale_independent_float_to_string -->
     </para>
    </listitem>
    <listitem>
     <para>
      Die Unterstützung für die veraltete Verwendung von geschweiften Klammern
      für den Offset-Zugriff wurde entfernt.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
// Anstelle von:
$array{0};
$array{"key"};
// Schreiben Sie:
$array[0];
$array["key"];
?>
]]>
      </programlisting>
      <!-- RFC: https://wiki.php.net/rfc/deprecate_curly_braces_array_access -->
     </para>
    </listitem>
    <listitem>
     <para>
      Wenn der final-Modifikator auf eine private Methode angewendet wird,
      wird nun eine Warnung erzeugt, es sei denn, die Methode ist der
      Konstruktor.
      <!-- FC: https://wiki.php.net/rfc/inheritance_private_methods -->
     </para>
    </listitem>
    <listitem>
     <para>
      Wenn im Konstruktor eines Objekts <function>exit</function> aufgerufen
      wird, wird der Destruktor des Objekts nicht mehr aufgerufen. Dies
      entspricht dem Verhalten, wenn ein Konstruktor eine Exception auslöst.
     </para>
    </listitem>
    <listitem>
     <para>
      Namen mit Bezug auf einen Namensraum dürfen keine Leerzeichen mehr
      enthalten: Während <code>Foo\Bar</code> als Namensraum-Name erkannt
      wird, wird <code>Foo \Bar</code> nicht erkannt. Umgekehrt sind
      reservierte Schlüsselwörter nun als Namensraumsegmente erlaubt, was auch
      die Interpretation von Code verändern kann: <code>new\x</code> ist nun
      gleichbedeutend mit <code>constant('new\x')</code>, nicht mit
      <code>new \x()</code>.
      <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
     </para>
    </listitem>
    <listitem>
     <para>
      Verschachtelte ternäre Ausdrücke müssen nun explizit in Klammern gesetzt
      werden.
      <!-- RFC: https://wiki.php.net/rfc/ternary_associativity -->
     </para>
    </listitem>
    <listitem>
     <para>
      <function>debug_backtrace</function> und
      <methodname>Exception::getTrace</methodname> referenzieren nun keine
      Parameter mehr. Es ist nicht mehr möglich, die Parameter einer Funktion
      über einen Backtrace zu ändern.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Handhabung numerischer Zeichenketten wurde geändert, damit sie
      intuitiver und weniger fehleranfällig ist. Nachfolgende Leerzeichen sind
      nun in numerischen Zeichenketten erlaubt, um mit der Behandlung von
      führenden Leerzeichen übereinzustimmen. Dies betrifft hauptsächlich:
     </para>
     <para>
      <simplelist>
       <member>Die Funktion <function>is_numeric</function></member>
       <member>Vergleiche zwischen Zeichenketten</member>
       <member>Typdeklarationen</member>
       <member>Inkrement- und Dekrement-Operationen</member>
      </simplelist>
     </para>
     <para>
      Das Konzept einer "vorangestellten numerischen Zeichenkette" wurde
      größtenteils aufgegeben; die Fälle, in denen dies beibehalten wird,
      dienen dazu, die Umstellung zu erleichtern. Zeichenketten, die eine
      <constant>E_NOTICE</constant> "A non well-formed numeric value
      encountered" ausgaben, geben nun eine <constant>E_WARNING</constant> "A
      non-numeric value encountered" aus und alle Zeichenketten, die eine
      <constant>E_WARNING</constant> "A non-numeric value encountered"
      ausgaben, lösen nun einen <classname>TypeError</classname> aus. Dies
      betrifft vor allem:
     </para>
     <para>
      <simplelist>
       <member>Arithmetische Operationen</member>
       <member>Bitweise Operationen</member>
      </simplelist>
     </para>
     <para>
      Diese Änderung von <constant>E_WARNING</constant> zu
      <classname>TypeError</classname> betrifft auch die
      <constant>E_WARNING</constant> "Illegal string offset 'string'" für
      unzulässige Zeichenketten-Offsets. Das Verhalten von expliziten
      Umwandlungen von Zeichenketten in int/float hat sich nicht geändert.
      <!-- RFC: https://wiki.php.net/rfc/saner-numeric-strings -->
     </para>
    </listitem>
    <listitem>
     <para>
      Magische Methoden werden nun auf ihre Parameter und Rückgabetypen
      geprüft, falls sie diese deklariert haben. Die Signaturen sollten der
      folgenden Liste entsprechen:
     </para>
     <para>
      <simplelist>
       <member><code>__call(string $name, array $arguments): mixed</code></member>
       <member><code>__callStatic(string $name, array $arguments): mixed</code></member>
       <member><code>__clone(): void</code></member>
       <member><code>__debugInfo(): ?array</code></member>
       <member><code>__get(string $name): mixed</code></member>
       <member><code>__invoke(mixed $arguments): mixed</code></member>
       <member><code>__isset(string $name): bool</code></member>
       <member><code>__serialize(): array</code></member>
       <member><code>__set(string $name, mixed $value): void</code></member>
       <member><code>__set_state(array $properties): object</code></member>
       <member><code>__sleep(): array</code></member>
       <member><code>__unserialize(array $data): void</code></member>
       <member><code>__unset(string $name): void</code></member>
       <member><code>__wakeup(): void</code></member>
      </simplelist>
      <!-- RFC: https://wiki.php.net/rfc/magic-methods-signature -->
     </para>
    </listitem>
    <listitem>
     <para>
      Array-Schlüssel, die an die Funktion
      <function>call_user_func_array</function> übergeben werden, werden nun
      als Namen der Parameter interpretiert. In früheren Versionen wurden sie
      stillschweigend ignoriert.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Deklaration einer Funktion namens <literal>assert()</literal>
      innerhalb eines Namensraums ist nicht mehr erlaubt und erzeugt einen
      <constant>E_COMPILE_ERROR</constant>. Die Funktion
      <function>assert</function> unterliegt einer speziellen Verarbeitung
      durch die Engine, was zu einem inkonsistenten Verhalten führen kann,
      wenn eine Funktion mit demselben Namen innerhalb eines Namensraums
      definiert wird.
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
 </sect2>

 <sect2 xml:id="migration80.incompatible.resource2object">
  <title>Umstellung von Ressourcen auf Objekte</title>

  <para>
   Mehrere &resource;n wurden in &object;e umgewandelt. Die Überprüfung des
   Rückgabewerts mit der Funktion <function>is_resource</function> sollte
   durch eine Überprüfung auf &false; ersetzt werden.
  </para>
  <itemizedlist>
    <listitem>
     <para>
      Die Funktion <function>curl_init</function> gibt nun ein
      <classname>CurlHandle</classname>-Objekt statt einer &resource; zurück.
      Die Funktion <function>curl_close</function> hat keine Wirkung mehr;
      stattdessen wird die <classname>CurlHandle</classname>-Instanz
      automatisch zerstört, wenn sie nicht mehr referenziert wird.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Funktion <function>curl_multi_init</function> gibt nun ein
      <classname>CurlMultiHandle</classname>-Objekt statt einer &resource;
      zurück. Die Funktion <function>curl_multi_close</function> hat keine
      Wirkung mehr; stattdessen wird die
      <classname>CurlMultiHandle</classname>-Instanz automatisch zerstört,
      wenn sie nicht mehr referenziert wird.
     </para>
    </listitem>
    <listitem>
     <para>
      Die Funktion <function>curl_share_init</function> gibt nun ein
      <classname>CurlShareHandle</classname>-Objekt statt einer &resource;
      zurück. Die Funktion <function>curl_share_close</function> hat keine
      Wirkung mehr; stattdessen wird die
      <classname>CurlShareHandle</classname>-Instanz automatisch zerstört,
      wenn sie nicht mehr referenziert wird.
     </para>
    </listitem>
   <listitem>
    <para>
     Die Funktion <function>enchant_broker_init</function> gibt nun ein
     <classname>EnchantBroker</classname>-Objekt statt einer &resource;
     zurück.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktionen <function>enchant_broker_request_dict</function> und
     <function>enchant_broker_request_pwl_dict</function> geben nun ein
     <classname>EnchantDictionary</classname>-Objekt statt einer &resource;
     zurück.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Erweiterung GD verwendet nun <classname>GdImage</classname>-Objekte
     statt &resource;n als zugrundeliegende Datenstruktur für Bilder. Die
     Funktion <function>imagedestroy</function> hat keine Wirkung mehr;
     stattdessen wird die <classname>GdImage</classname>-Instanz automatisch
     zerstört, wenn sie nicht mehr referenziert wird.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktionen <function>openssl_x509_read</function> und
     <function>openssl_csr_sign</function> geben nun ein
     <classname>OpenSSLCertificate</classname>-Objekt statt einer &resource;
     zurück. Die Funktion <function>openssl_x509_free</function> ist veraltet
     und hat keine Wirkung mehr; stattdessen wird die
     <classname>OpenSSLCertificate</classname>-Instanz automatisch zerstört,
     wenn sie nicht mehr referenziert wird.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>openssl_csr_new</function> gibt nun statt einer
     &resource; ein
     <classname>OpenSSLCertificateSigningRequest</classname>-Objekt zurück.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>openssl_pkey_new</function> gibt nun ein
     <classname>OpenSSLAsymmetricKey</classname>-Objekt statt einer &resource;
     zurück. Die Funktion <function>openssl_pkey_free</function> ist veraltet
     und hat keine Wirkung mehr; stattdessen wird die
     <classname>OpenSSLAsymmetricKey</classname>-Instanz automatisch zerstört,
     wenn sie nicht mehr referenziert wird.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>shmop_open</function> gibt nun ein
     <classname>Shmop</classname>-Objekt statt einer &resource; zurück. Die
     Funktion <function>shmop_close</function> hat keine Wirkung mehr und ist
     veraltet; stattdessen wird die <classname>Shmop</classname>-Instanz
     automatisch zerstört, wenn sie nicht mehr referenziert wird.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktionen <function>socket_create</function>,
     <function>socket_create_listen</function>,
     <function>socket_accept</function>,
     <function>socket_import_stream</function>,
     <function>socket_addrinfo_connect</function>,
     <function>socket_addrinfo_bind</function> und
     <function>socket_wsaprotocol_info_import</function> geben nun ein
     <classname>Socket</classname>-Objekt statt einer &resource; zurück.
     Die Funktion <function>socket_addrinfo_lookup</function> gibt nun ein
     Array von <classname>AddressInfo</classname>-Objekten statt &resource;n
     zurück.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>msg_get_queue</function> gibt nun ein
     <classname>SysvMessageQueue</classname>-Objekt statt einer &resource;
     zurück.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>sem_get</function> gibt nun ein
     <classname>SysvSemaphore</classname>-Objekt statt einer &resource; zurück.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>shm_attach</function> gibt nun ein
     <classname>SysvSharedMemory</classname>-Objekt statt einer &resource;
     zurück.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktionen <function>xml_parser_create</function> und
     <function>xml_parser_create_ns</function> geben nun ein
     <classname>XMLParser</classname>-Objekt statt einer &resource; zurück.
     Die Funktion <function>xml_parser_free</function> hat keine Wirkung mehr;
     stattdessen wird die XMLParser-Instanz automatisch zerstört, wenn sie
     nicht mehr referenziert wird.
    </para>
   </listitem>
   <listitem>
    <para>
     Die <link linkend="book.xmlwriter">XMLWriter</link>-Funktionen
     akzeptieren nun <classname>XMLWriter</classname>-Objekte statt
     &resource;n und geben diese zurück.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>inflate_init</function> gibt nun ein
     <classname>InflateContext</classname>-Objekt statt einer &resource;
     zurück.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>deflate_init</function> gibt nun ein
     <classname>DeflateContext</classname>-Objekt statt einer &resource;
     zurück.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.com">
  <title>COM und .Net (Windows)</title>

  <para>
   Die Möglichkeit, Konstanten ohne Berücksichtigung der Groß-/Kleinschreibung
   aus Typbibliotheken zu importieren, wurde entfernt. Das zweite Argument
   der Funktion <function>com_load_typelib</function> kann nicht mehr false sein;
   <link linkend="ini.com.autoregister-casesensitive">com.autoregister_casesensitive</link>
   kann nicht mehr deaktiviert werden. Das bedeutet, dass
   #case_insensitive-Markierungen in
   <link linkend="ini.com.typelib-file">com.typelib_file</link> ignoriert
   werden.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.curl">
  <title>CURL</title>

  <para>
   <constant>CURLOPT_POSTFIELDS</constant> akzeptiert keine Objekte mehr als
   Arrays. Um ein Objekt als Array zu interpretieren, muss eine explizite
   Umwandlung mittels <code>(array)</code> durchgeführt werden. Dasselbe gilt
   auch für andere Optionen, die Arrays akzeptieren.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.datetime">
  <title>Datum und Uhrzeit</title>

  <para>
   Die Funktionen <function>mktime</function> und
   <function>gmmktime</function> benötigen nun mindestens einen Parameter.
   Die Funktion <function>time</function> kann verwendet werden, um den
   aktuellen Zeitstempel zu erhalten.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.dom">
  <title>DOM</title>

  <para>
   Nicht implementierte Klassen aus der Erweiterung DOM, die keinerlei
   Funktion hatten und Testdaten enthielten, wurden entfernt. Diese Klassen
   wurden auch aus der neuesten Version des des DOM-Standards entfernt:
  </para>
  <para>
   <simplelist>
    <member><classname>DOMNameList</classname></member>
    <member><classname>DomImplementationList</classname></member>
    <member><classname>DOMConfiguration</classname></member>
    <member><classname>DomError</classname></member>
    <member><classname>DomErrorHandler</classname></member>
    <member><classname>DOMImplementationSource</classname></member>
    <member><classname>DOMLocator</classname></member>
    <member><classname>DOMUserDataHandler</classname></member>
    <member><classname>DOMTypeInfo</classname></member>
    <member><classname>DOMStringExtend</classname></member>
   </simplelist>
  </para>
  <para>
   Nicht implementierte Methoden aus der Erweiterung DOM, die keinerlei
   Funktion hatten, wurden entfernt:
  </para>
  <para>
   <simplelist>
    <member><methodname>DOMNamedNodeMap::setNamedItem</methodname></member>
    <member><methodname>DOMNamedNodeMap::removeNamedItem</methodname></member>
    <member><methodname>DOMNamedNodeMap::setNamedItemNS</methodname></member>
    <member><methodname>DOMNamedNodeMap::removeNamedItem</methodname></member>
    <member><methodname>DOMText::replaceWholeText</methodname></member>
    <member><methodname>DOMNode::compareDocumentPosition</methodname></member>
    <member><methodname>DOMNode::isEqualNode</methodname></member>
    <member><methodname>DOMNode::getFeature</methodname></member>
    <member><methodname>DOMNode::setUserData</methodname></member>
    <member><methodname>DOMNode::getUserData</methodname></member>
    <member><methodname>DOMDocument::renameNode</methodname></member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.enchant">
  <title>Enchant</title>

  <itemizedlist>
   <listitem>
    <para>
     Die Funktionen <function>enchant_broker_list_dicts</function>,
     <function>enchant_broker_describe</function> und
     <function>enchant_dict_suggest</function> geben nun ein leeres
     Array anstelle von &null; zurück.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.exif">
  <title>Exif</title>

  <para>
   Die Funktion <function>read_exif_data</function> wurde entfernt;
   stattdessen sollte die Funktion <function>exif_read_data</function>
   verwendet werden.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.filter">
  <title>Filter</title>

  <itemizedlist>
   <listitem>
    <para>
     Die Flags <constant>FILTER_FLAG_SCHEME_REQUIRED</constant> und
     <constant>FILTER_FLAG_HOST_REQUIRED</constant> für den Filter
     <constant>FILTER_VALIDATE_URL</constant> wurden entfernt.
     <literal>scheme</literal> und <literal>host</literal> sind (und waren)
     immer erforderlich.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Konstanten <constant>INPUT_REQUEST</constant> und
     <constant>INPUT_SESSION</constant>, die u. a. für die Funktion
     <function>filter_input</function> verwendet wurden, wurden entfernt. Sie
     wurden nie implementiert und ihre Verwendung löste immer eine Warnung aus.
    </para> 
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gd">
  <title>GD</title>

  <itemizedlist>
   <listitem>
    <para>
     Die veraltete Funktion <function>image2wbmp</function> wurde entfernt.
     <!-- RFC: https://wiki.php.net/rfc/image2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     Die veralteten Funktionen <function>png2wbmp</function> und
     <function>jpeg2wbmp</function> wurden entfernt.
     <!-- RFC: https://wiki.php.net/rfc/deprecate-png-jpeg-2wbmp -->
    </para>
   </listitem>
   <listitem>
    <para>
     Der Standardparameter <parameter>mode</parameter> der Funktion
     <function>imagecropauto</function> akzeptiert den Wert
     <literal>-1</literal> nicht mehr. Stattdessen sollte
     <constant>IMG_CROP_DEFAULT</constant> verwendet werden.
    </para>
   </listitem>
   <listitem>
    <para>
     Unter Windows wurde die Datei <filename>php_gd2.dll</filename> in
     <filename>php_gd.dll</filename> umbenannt.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.gmp">
  <title>GMP</title>

  <para>
   Die Funktion <function>gmp_random</function> wurde entfernt. Stattdessen
   sollte eine der Funktionen <function>gmp_random_range</function> oder
   <function>gmp_random_bits</function> verwendet werden.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.iconv">
  <title>Iconv</title>

  <para>
   iconv-Implementierungen, die <varname>errno</varname> beim Auftreten von
   Fehlern nicht korrekt setzen, werden nicht mehr unterstützt.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.imap">
  <title>IMAP</title>

  <itemizedlist>
   <listitem>
    <para>
     Bei der Funktion <function>imap_headerinfo</function> wurde der nicht
     verwendete Parameter <parameter>default_host</parameter> entfernt.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>imap_header</function>, die ein Alias von
     <function>imap_headerinfo</function> ist, wurde entfernt.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.intl">
  <title>Funktionen für die Internationalisierung</title>

  <itemizedlist>
   <listitem>
    <para>
     Die veraltete Konstante <constant>INTL_IDNA_VARIANT_2003</constant> wurde
     entfernt.
     <!-- RFC: https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003 -->
    </para>
   </listitem>
   <listitem>
    <para>
     Die veraltete Konstante <constant>Normalizer::NONE</constant> wurde
     entfernt.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.ldap">
  <title>LDAP</title>

  <itemizedlist>
   <listitem>
    <para>
     Die veralteten Funktionen <function>ldap_sort</function>,
     <function>ldap_control_paged_result</function> und
     <function>ldap_control_paged_result_response</function> wurden
     entfernt.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Schnittstelle der Funktion <function>ldap_set_rebind_proc</function>
     hat sich geändert; der Parameter <parameter>callback</parameter>
     akzeptiert keine leeren Zeichenketten nicht mehr; stattdessen sollte
     &null; verwendet werden.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.mbstring">
  <title>MBString</title>

  <itemizedlist>
   <listitem>
    <para>
     Die Direktive
     <link linkend="ini.mbstring.func-overload">mbstring.func_overload</link>
     wurde entfernt. Die zugehörigen Konstanten
     <constant>MB_OVERLOAD_MAIL</constant>,
     <constant>MB_OVERLOAD_STRING</constant> und
     <constant>MB_OVERLOAD_REGEX</constant> wurden ebenfalls entfernt.
     Außerdem wurden in der Funktion <function>mb_get_info</function> die
     Einträge <literal>"func_overload"</literal> und
     <literal>"func_overload_list"</literal> entfernt.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>mb_parse_str</function> kann nicht mehr ohne
     Angabe eines Ergebnisarrays verwendet werden.
    </para>
   </listitem>
   <listitem>
    <para>
     Eine Reihe veralteter mbregex-Aliase wurde entfernt. Siehe die folgende
     Liste, welche Funktionen stattdessen verwendet werden sollten:
    </para>
    <para>
     <simplelist>
      <member><function>mbregex_encoding</function> → <function>mb_regex_encoding</function></member>
      <member><function>mbereg</function> → <function>mb_ereg</function></member>
      <member><function>mberegi</function> → <function>mb_eregi</function></member>
      <member><function>mbereg_replace</function> → <function>mb_ereg_replace</function></member>
      <member><function>mberegi_replace</function> → <function>mb_eregi_replace</function></member>
      <member><function>mbsplit</function> → <function>mb_split</function></member>
      <member><function>mbereg_match</function> → <function>mb_ereg_match</function></member>
      <member><function>mbereg_search</function> → <function>mb_ereg_search</function></member>
      <member><function>mbereg_search_pos</function> → <function>mb_ereg_search_pos</function></member>
      <member><function>mbereg_search_regs</function> → <function>mb_ereg_search_regs</function></member>
      <member><function>mbereg_search_init</function> → <function>mb_ereg_search_init</function></member>
      <member><function>mbereg_search_getregs</function> → <function>mb_ereg_search_getregs</function></member>
      <member><function>mbereg_search_getpos</function> → <function>mb_ereg_search_getpos</function></member>
      <member><function>mbereg_search_setpos</function> → <function>mb_ereg_search_setpos</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     Bei der Funktion <function>mb_ereg_replace</function> wurde der
     Modifikator <literal>e</literal> entfernt. Stattdessen sollte die
     Funktion <function>mb_ereg_replace_callback</function> verwendet werden.
    </para>
   </listitem>
   <listitem>
    <para>
     Wenn bei der Funktion <function>mb_ereg_replace</function> der Parameter
     für das Suchmuster keine Zeichenkette ist, wird er nun als Zeichenkette
     anstelle eines ASCII-Codepunkts interpretiert. Das vorherige Verhalten
     kann durch einen expliziten Aufruf der Funktion <function>chr</function>
     wiederhergestellt werden.
    </para>
   </listitem>
   <listitem>
    <para>
     Der Parameter <parameter>needle</parameter> darf bei den Funktionen
     <function>mb_strpos</function>, <function>mb_strrpos</function>,
     <function>mb_stripos</function>, <function>mb_strripos</function>,
     <function>mb_strstr</function>, <function>mb_stristr</function>,
     <function>mb_strrchr</function> und <function>mb_strrichr</function> nun
     leer sein.
    </para>
   </listitem>
   <listitem>
    <para>
     Bei der Funktion <function>mb_decode_numericentity</function> wurde der
     intern nicht verwendete Parameter <parameter>is_hex</parameter> entfernt.
    </para>
   </listitem>
   <listitem>
    <para>
     Bei der Funktion <function>mb_strrpos</function> wurde das alte Verhalten
     bei Übergabe der Kodierung anstelle eines Offsets als dritter Parameter
     entfernt; stattdessen sollte der Offset <literal>0</literal> explizit als
     viertes Argument angegeben werden.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Aliase für die <literal>ISO_8859-*</literal>-Zeichenkodierungen
     wurden durch die <literal>ISO8859-*</literal>-Aliase ersetzt, um die
     Interoperabilität mit der Erweiterung iconv zu verbessern. Die
     ISO-8859-Aliase von mbregex mit Unterstrichen
     (<literal>ISO_8859_*</literal> und <literal>ISO8859_*</literal>) wurden
     ebenfalls entfernt.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktionen <function>mb_ereg</function> und
     <function>mb_eregi</function> geben bei einer gefundenen Übereinstimmung
     nun den booleschen Wert &true; zurück. Zuvor gaben sie den Integerwert
     <literal>1</literal> zurück, wenn der Parameter
     <parameter>matches</parameter> nicht übergeben wurde. Wenn
     <parameter>matches</parameter> übergeben wurde, gaben sie
     <code>max(1, strlen($matches[0]))</code> zurück.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.oci8">
  <title>OCI8</title>

  <itemizedlist>
   <listitem>
    <para>
     Die Klassen <classname>OCI-Lob</classname> und
     <classname>OCI-Collection</classname> wurden umbenannt in
     <classname>OCILob</classname> bzw. <classname>OCICollection</classname>,
     um die Namenskonformität zu gewährleisten, die in PHP 8 durch die 
     arginfo-Tools für Anmerkungen zum Typ (arginfo type annotation tooling)
     erzwungen wird.
    </para>
   </listitem>
   <listitem>
    <para>
     Mehrere Alias-Funktionen wurden als veraltet markiert.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>oci_internal_debug</function> und ihr Alias
     <function>ociinternaldebug</function> wurden entfernt.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.odbc">
  <title>ODBC</title>

  <itemizedlist>
   <listitem>
    <para>
     Die Funktion <function>odbc_connect</function> verwendet Verbindungen
     nicht mehr wieder.
    </para>
   </listitem>
   <listitem>
    <para>
     Bei der Funktion <function>odbc_exec</function> wurde der nicht
     verwendete Parameter <parameter>flags</parameter> entfernt.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.openssl">
  <title>OpenSSL</title>

  <itemizedlist>
   <listitem>
    <para>
     Den Funktionen <function>openssl_seal</function> und
     <function>openssl_open</function> muss nun der Parameter
     <parameter>method</parameter> übergeben werden, da der bisherige
     Standardwert <literal>"RC4"</literal> als unsicher eingestuft wird.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pcre">
  <title>Reguläre Ausdrücke (Perl-kompatibel)</title>

  <para>
   Wenn ungültige Escape-Sequenzen übergeben werden, werden sie nicht mehr als
   Literale interpretiert. Dieses Verhalten erforderte bisher den Modifikator
   <literal>X</literal>, der nun ignoriert wird.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo">
  <title>PHP Data Objects</title>

  <itemizedlist>
   <listitem>
    <para>
     Der Standardmodus für die Fehlerbehandlung wurde von "silent" auf
     "exceptions" geändert. Siehe
     <link linkend="pdo.error-handling">Fehler und Fehlerbehandlung</link> für
     Details.
     <!-- RFC: https://wiki.php.net/rfc/pdo_default_errmode -->
    </para>
   </listitem>
   <listitem>
    <para>
     Die Signaturen einiger PDO-Methoden haben sich geändert:
    </para>
    <para>
     <simplelist>
      <member><code>PDO::query(string $query, ?int $fetchMode  = null, mixed  ...$fetchModeArgs)</code></member>
      <member><code>PDOStatement::setFetchMode(int $mode, mixed ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-odbc">
  <title>PDO-ODBC</title>

  <para>
   Die &php.ini;-Direktive
   <link linkend="ini.pdo-odbc.db2-instance-name">pdo_odbc.db2_instance_name</link>
   wurde entfernt.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pdo-mysql">
  <title>PDO-MySQL</title>

  <para>
   Die Methode <methodname>PDO::inTransaction</methodname> meldet nun den
   tatsächlichen Transaktionsstatus der Verbindung, anstatt einer ungefähren
   Angabe, die von PDO verwaltet wird. Wenn eine Abfrage mit einem "impliziten
   Commit" ausgeführt wird, gibt <methodname>PDO::inTransaction</methodname>
   anschließend &false; zurück, da die Transaktion nicht mehr aktiv ist.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.pgsql">
  <title>PostgreSQL</title>

  <itemizedlist>
   <listitem>
    <para>
     Die veraltete <function>pg_connect</function>-Syntax mit mehreren
     Parametern anstelle einer Verbindungszeichenkette wird nicht mehr
     unterstützt.
    </para>
   </listitem>
   <listitem>
    <para>
     Die veraltete Signatur von <function>pg_lo_import</function> und
     <function>pg_lo_export</function>, die die Verbindung als letzten
     Parameter übergibt, wird nicht mehr unterstützt. Die Verbindung sollte
     stattdessen als erster Parameter übergeben werden.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Funktion <function>pg_fetch_all</function> gibt für Ergebnismengen
     mit null Zeilen nun ein leeres Array statt &false; zurück.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.phar">
  <title>Phar</title>

  <para>
   Um mögliche Sicherheitslücken aufgrund von Objektinstanziierung,
   Autoloading usw. zu schließen, werden Metadaten, die mit phar verknüpft
   sind, nicht mehr automatisch desialisiert.
   <!-- RFC: https://wiki.php.net/rfc/phar_stop_autoloading_metadata -->
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.reflection">
  <title>Reflection</title>

  <itemizedlist>
   <listitem>
    <para>
     Die Signaturen der Methoden
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($args)</code></member>
      <member><code>ReflectionFunction::invoke($args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $args)</code></member>
     </simplelist>
    </para>
    <para>
     wurden geändert in:
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance(...$args)</code></member>
      <member><code>ReflectionFunction::invoke(...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, ...$args)</code></member>
     </simplelist>
    </para>
    <para>
     Code, der sowohl mit PHP 7 als auch mit PHP 8 kompatibel sein muss, kann die folgenden
     Signaturen verwenden, um mit beiden Versionen kompatibel zu sein:
    </para>
    <para>
     <simplelist>
      <member><code>ReflectionClass::newInstance($arg = null, ...$args)</code></member>
      <member><code>ReflectionFunction::invoke($arg = null, ...$args)</code></member>
      <member><code>ReflectionMethod::invoke($object, $arg = null, ...$args)</code></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     Die Methode <methodname>ReflectionType::__toString</methodname> gibt nun eine vollständige Debug-Darstellung
     des Typs zurück und ist nicht mehr veraltet. Insbesondere enthält das Ergebnis bei nullbaren Typen den Hinweis, der anzeigt, dass null zugewiesen werden kann.
     Das Format des Rückgabewertes ist nicht stabil und
     kann sich zwischen den PHP-Versionen ändern.
    </para>
   </listitem>
   <listitem>
    <para>
     Die export()-Methoden von Reflection wurden entfernt. Stattdessen können
     Reflection-Objekte in Zeichenketten umgewandelt werden.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Methoden <methodname>ReflectionMethod::isConstructor</methodname> und
     <methodname>ReflectionMethod::isDestructor</methodname> geben nun auch
     für die Schnittstellenmethoden
     <link linkend="object.construct">__construct()</link> und
     <link linkend="object.destruct">__destruct()</link> &true; zurück. Zuvor
     galt dies nur für Methoden von Klassen und Traits.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Methode <methodname>ReflectionType::isBuiltin</methodname> wurde in die Klasse
     <classname>ReflectionNamedType</classname> verschoben. Die Klasse <classname>ReflectionUnionType</classname> verfügt nicht über diese Methode.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sockets">
  <title>Sockets</title>

  <itemizedlist>
   <listitem>
    <para>
     Bei der Funktion <function>socket_addrinfo_lookup</function> wurden die
     veralteten <parameter>flags</parameter>
     <constant>AI_IDN_ALLOW_UNASSIGNED</constant> und
     <constant>AI_IDN_USE_STD3_ASCII_RULES</constant> entfernt.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.spl">
  <title>Standard PHP Library (SPL)</title>

  <itemizedlist>
   <listitem>
    <para>
     <methodname>SplFileObject::fgetss</methodname> has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplFileObject::seek</methodname> now always seeks to the beginning of the line.
     Previously, positions <literal>=1</literal> sought to the beginning of the next line.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplHeap::compare</methodname> now specifies a method signature. Inheriting classes
     implementing this method will now have to use a compatible method signature.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>SplDoublyLinkedList::push</methodname>,
     <methodname>SplDoublyLinkedList::unshift</methodname> and
     <methodname>SplQueue::enqueue</methodname> now return <type>void</type> instead of &true;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>spl_autoload_register</function> will now always throw a
     <classname>TypeError</classname> on invalid arguments, therefore the second argument
     <parameter>do_throw</parameter> is ignored and a notice will be emitted if it is set to &false;.
    </para>
   </listitem>
   <listitem>
    <para>
     <classname>SplFixedArray</classname> is now an <interfacename>IteratorAggregate</interfacename>
     and not an <interfacename>Iterator</interfacename>.
     <methodname>SplFixedArray::rewind</methodname>, <methodname>SplFixedArray::current</methodname>,
     <methodname>SplFixedArray::key</methodname>, <methodname>SplFixedArray::next</methodname>, and
     <methodname>SplFixedArray::valid</methodname> have been removed. In their place,
     <methodname>SplFixedArray::getIterator</methodname> has been added. Any code which uses explicit
     iteration over SplFixedArray must now obtain an
     <interfacename>Iterator</interfacename> through
     <methodname>SplFixedArray::getIterator</methodname>. This means that
     <classname>SplFixedArray</classname> is now safe to use in nested loops.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.standard">
  <title>Standard Library</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>assert</function> will no longer evaluate string arguments, instead they will be
     treated like any other argument. <code>assert($a == $b)</code> should be used instead of
     <code>assert('$a == $b')</code>. The <link
     linkend="ini.assert.quiet-eval">assert.quiet_eval</link> ini directive and the
     <constant>ASSERT_QUIET_EVAL</constant> constant have also been removed, as they would no longer
     have any effect.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_str</function> can no longer be used without specifying a result array.
    </para>
   </listitem>
   <listitem>
    <para>
     The <link linkend="filters.string.strip_tags">string.strip_tags</link> filter has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>needle</parameter> argument of <function>strpos</function>,
     <function>strrpos</function>, <function>stripos</function>, <function>strripos</function>,
     <function>strstr</function>, <function>strchr</function>, <function>strrchr</function>, and
     <function>stristr</function> will now always be interpreted as a string. Previously non-string
     needles were interpreted as an ASCII code point. An explicit call to <function>chr</function> can
     be used to restore the previous behavior.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>needle</parameter> argument for <function>strpos</function>,
     <function>strrpos</function>, <function>stripos</function>, <function>strripos</function>,
     <function>strstr</function>, <function>stristr</function> and <function>strrchr</function> can
     now be empty.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>length</parameter> argument for <function>substr</function>,
     <function>substr_count</function>, <function>substr_compare</function>, and
     <function>iconv_substr</function> can now be &null;. &null; values will behave as if no length
     argument was provided and will therefore return the remainder of the string instead of an empty
     string.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>length</parameter> argument for <function>array_splice</function> can now be
     &null;. &null; values will behave identically to omitting the argument, thus removing everything
     from the <parameter>offset</parameter> to the end of the array.
    </para>
   </listitem>
   <listitem>
    <para>
     The <parameter>args</parameter> argument of <function>vsprintf</function>,
     <function>vfprintf</function>, and <function>vprintf</function> must now be an array. Previously
     any type was accepted.
    </para>
   </listitem>
   <listitem>
    <para>
     The <literal>'salt'</literal> option of <function>password_hash</function> is no longer
     supported. If the <literal>'salt'</literal> option is used a warning is generated, the provided
     salt is ignored, and a generated salt is used instead.
    </para>
   </listitem>
   <listitem>
    <para>
     The <function>quotemeta</function> function will now return an empty string if an empty string
     was passed. Previously &false; was returned.
    </para>
   </listitem>
   <listitem>
    <para>
     The following functions have been removed:
    </para>
    <para>
     <simplelist>
      <member><function>hebrevc</function></member>
      <member><function>convert_cyr_string</function></member>
      <member><function>money_format</function></member>
      <member><function>ezmlm_hash</function></member>
      <member><function>restore_include_path</function></member>
      <member><function>get_magic_quotes_gpc</function></member>
      <member><function>get_magic_quotes_runtime</function></member>
      <member><function>fgetss</function></member>
     </simplelist>
    </para>
   </listitem>
   <listitem>
    <para>
     <constant>FILTER_SANITIZE_MAGIC_QUOTES</constant> has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     Calling <function>implode</function> with parameters in a reverse order <code>($pieces,
     $glue)</code> is no longer supported.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>parse_url</function> will now distinguish absent and empty queries and fragments:
    </para>
    <para>
     <simplelist>
      <member><code>http://example.com/foo → query = null, fragment = null</code></member>
      <member><code>http://example.com/foo? → query = "",   fragment = null</code></member>
      <member><code>http://example.com/foo# → query = null, fragment = ""</code></member>
      <member><code>http://example.com/foo?# → query = "",   fragment = ""</code></member>
     </simplelist>
      Previously all cases resulted in query and fragment being &null;.
    </para>
   </listitem>
   <listitem>
    <para>
     <function>var_dump</function> and <function>debug_zval_dump</function> will now print
     floating-point numbers using <link linkend="ini.serialize-precision">serialize_precision</link>
     rather than <link linkend="ini.precision">precision</link>. In a default configuration, this
     means that floating-point numbers are now printed with full accuracy by these debugging
     functions.
    </para>
   </listitem>
   <listitem>
    <para>
     If the array returned by <link linkend="object.sleep">__sleep()</link> contains non-existing
     properties, these are now silently ignored. Previously, such properties would have been
     serialized as if they had the value &null;.
    </para>
   </listitem>
   <listitem>
    <para>
     The default locale on startup is now always <literal>"C"</literal>. No locales are inherited from
     the environment by default. Previously, <constant>LC_ALL</constant> was set to
     <literal>"C"</literal>, while <constant>LC_CTYPE</constant> was inherited from the environment.
     However, some functions did not respect the inherited locale without an explicit
     <function>setlocale</function> call. An explicit <function>setlocale</function> call is now
     always required if a locale component should be changed from the default.
    </para>
   </listitem>
   <listitem>
    <para>
     The deprecated DES fallback in <function>crypt</function> has been removed. If an unknown salt
     format is passed to <function>crypt</function>, the function will fail with <literal>*0</literal>
     instead of falling back to a weak DES hash now.
    </para>
   </listitem>
   <listitem>
    <para>
     Specifying out of range rounds for SHA256/SHA512 <function>crypt</function> will now fail with
     <literal>*0</literal> instead of clamping to the closest limit. This matches glibc behavior.
    </para>
   </listitem>
   <listitem>
    <para>
     The result of sorting functions may have changed, if the array contains elements that compare as
     equal.
    </para>
   </listitem>
   <listitem>
    <para>
     Any functions accepting callbacks that are not explicitly specified to accept parameters by
     reference will now warn if a callback with reference parameters is used. Examples include
     <function>array_filter</function> and <function>array_reduce</function>. This was already the
     case for most, but not all, functions previously.
    </para>
   </listitem>
   <listitem>
    <para>
     The HTTP stream wrapper as used by functions like <function>file_get_contents</function>
     now advertises HTTP/1.1 rather than HTTP/1.0 by default. This does not change the behavior of the
     client, but may cause servers to respond differently. To retain the old behavior, set the
     <literal>'protocol_version'</literal> stream context option, e.g.
    </para>
    <para>
     <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['http' => ['protocol_version' => '1.0']]);
echo file_get_contents('http://example.org', false, $ctx);
?>
]]>
     </programlisting>
    </para>
   </listitem>
   <listitem>
    <para>
     Calling <function>crypt</function> without an explicit salt is no longer supported. If you would
     like to produce a strong hash with an auto-generated salt, use
     <function>password_hash</function> instead.
    </para>
   </listitem>
   <listitem>
    <para>
    <function>substr</function>, <function>mb_substr</function>, <function>iconv_substr</function> and
    <function>grapheme_substr</function> now consistently clamp out-of-bounds offsets to the string
    boundary. Previously, &false; was returned instead of the empty string in some cases.
    </para>
   </listitem>
   <listitem>
    <para>
     On Windows, the program execution functions (<function>proc_open</function>, <function>exec</function>,
     <function>popen</function> etc.) using the shell, now consistently execute <command>%comspec% /s
     /c "$commandline"</command>, which has the same effect as executing
     <command>$commandline</command> (without additional quotes).
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.sysvsem">
  <title>Sysvsem</title>

  <itemizedlist>
   <listitem>
    <para>
     The <parameter>auto_release</parameter> parameter of <function>sem_get</function> was changed to
     accept bool values rather than int.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tidy">
  <title>Tidy</title>

  <itemizedlist>
   <listitem>
    <para>
     The <parameter>use_include_path</parameter> parameter, which was not used internally, has been
     removed from <function>tidy_repair_string</function>.
    </para>
   </listitem>
   <listitem>
    <para>
     <methodname>tidy::repairString</methodname> and <methodname>tidy::repairFile</methodname> became
     static methods.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.tokenizer">
  <title>Tokenizer</title>

  <itemizedlist>
   <listitem>
    <para>
     <literal>T_COMMENT</literal> tokens will no longer include a trailing newline. The newline will
     instead be part of a following <literal>T_WHITESPACE</literal> token. It should be noted that
     <literal>T_COMMENT</literal> is not always followed by whitespace, it may also be followed by
     <literal>T_CLOSE_TAG</literal> or end-of-file.
    </para>
   </listitem>
   <listitem>
    <para>
     Namespaced names are now represented using the <literal>T_NAME_QUALIFIED</literal>
     (<code>Foo\Bar</code>), <literal>T_NAME_FULLY_QUALIFIED</literal> (<code>\Foo\Bar</code>) and
     <literal>T_NAME_RELATIVE</literal> (<code>namespace\Foo\Bar</code>) tokens.
     <literal>T_NS_SEPARATOR</literal> is only used for standalone namespace separators, and only
     syntactially valid in conjunction with group use declarations.
     <!-- RFC: https://wiki.php.net/rfc/namespaced_names_as_token -->
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlreader">
  <title>XMLReader</title>

  <para>
   <methodname>XMLReader::open</methodname> and <methodname>XMLReader::xml</methodname> are now
   static methods. They can still be called as instance methods, but inheriting classes need to declare them
   as static if they override these methods.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.xmlrpc">
  <title>XML-RPC</title>

  <para>
   The XML-RPC extension has been moved to PECL and is no longer part of the PHP
   distribution.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zip">
  <title>Zip</title>

  <para>
   <constant>ZipArchive::OPSYS_Z_CPM</constant> has been removed (this name was a typo). Use
   <constant>ZipArchive::OPSYS_CPM</constant> instead.
  </para>
 </sect2>

 <sect2 xml:id="migration80.incompatible.zlib">
  <title>Zlib</title>

  <itemizedlist>
   <listitem>
    <para>
     <function>gzgetss</function> has been removed.
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="ini.zlib.output-compression">zlib.output_compression</link> is no longer
     automatically disabled for <literal>Content-Type: image/*</literal>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration80.incompatible.php-test-packs">
  <title>Windows PHP Test Packs</title>

  <para>
   The test runner has been renamed from <filename>run-test.php</filename> to
   <filename>run-tests.php</filename>, to match its name in php-src.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
